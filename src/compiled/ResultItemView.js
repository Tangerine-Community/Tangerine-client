var ResultItemView;

ResultItemView = Backbone.Marionette.CompositeView.extend({
  className: "result_view",
  events: {
    'click .save': 'save',
    'click .another': 'another'
  },
  another: function() {
    return Tangerine.router.navigate("runMar/" + this.model.get('assessmentId'), {
      trigger: true
    });
  },
  save: function() {
    var $button;
    this.model.add({
      name: "Assessment complete",
      prototype: "complete",
      data: {
        "comment": this.$el.find('#additional-comments').val() || "",
        "end_time": (new Date()).getTime()
      },
      subtestId: "result",
      sum: {
        correct: 1,
        incorrect: 0,
        missing: 0,
        total: 1
      }
    });
    if (this.model.save()) {
      Tangerine.activity = "";
      Utils.midAlert(this.text.saved);
      this.$el.find('.save_status').html(this.text.saved);
      this.$el.find('.save_status').removeClass('not_saved');
      this.$el.find('.question').fadeOut(250);
      $button = this.$el.find("button.save");
      return $button.removeClass('save').addClass('another').html(this.text.another);
    } else {
      Utils.midAlert("Save error");
      return this.$el.find('.save_status').html("Results may not have saved");
    }
  },
  i18n: function() {
    return this.text = {
      "assessmentComplete": t("ResultView.label.assessment_complete"),
      "comments": t("ResultView.label.comments"),
      "subtestsCompleted": t("ResultView.label.subtests_completed"),
      "save": t("ResultView.button.save"),
      "another": t("ResultView.button.another"),
      "saved": t("ResultView.message.saved"),
      "notSaved": t("ResultView.message.not_saved")
    };
  },
  initialize: function(options) {
    this.i18n();
    this.model = options.model;
    this.assessment = options.assessment;
    this.saved = false;
    return this.resultSumView = new ResultSumView({
      model: this.model.parent.result,
      finishCheck: false
    });
  },
  render: function() {
    $(".subtest-next").hide();
    this.$el.html("<h2>" + this.text.assessmentComplete + "</h2> <button class='save command'>" + this.text.save + "</button> <div class='info_box save_status not_saved'>" + this.text.notSaved + "</div> <br> <div class='question'> <label class='prompt' for='additional-comments'>" + this.text.comments + "</label> <textarea id='additional-comments' class='full_width'></textarea> </div> <div class='label_value'> <h2>" + this.text.subtestsCompleted + "</h2> <div id='result_sum' class='info_box'></div> </div>");
    this.resultSumView.setElement(this.$el.find("#result_sum"));
    this.resultSumView.render();
    return this.trigger("rendered");
  },
  onClose: function() {
    return this.resultSumView.close();
  }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvcmVzdWx0L1Jlc3VsdEl0ZW1WaWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLGNBQUEsR0FBa0IsUUFBUSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsTUFBbEMsQ0FFaEI7RUFBQSxTQUFBLEVBQVcsYUFBWDtFQUVBLE1BQUEsRUFDRTtJQUFBLGFBQUEsRUFBbUIsTUFBbkI7SUFDQSxnQkFBQSxFQUFtQixTQURuQjtHQUhGO0VBTUEsT0FBQSxFQUFTLFNBQUE7V0FDUCxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQWpCLENBQTBCLFNBQUEsR0FBWSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQVgsQ0FBZSxjQUFmLENBQXRDLEVBQXNFO01BQUEsT0FBQSxFQUFTLElBQVQ7S0FBdEU7RUFETyxDQU5UO0VBU0EsSUFBQSxFQUFNLFNBQUE7QUFDSixRQUFBO0lBQUEsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQ0U7TUFBQSxJQUFBLEVBQU8scUJBQVA7TUFDQSxTQUFBLEVBQVcsVUFEWDtNQUVBLElBQUEsRUFDRTtRQUFBLFNBQUEsRUFBWSxJQUFDLENBQUEsR0FBRyxDQUFDLElBQUwsQ0FBVSxzQkFBVixDQUFpQyxDQUFDLEdBQWxDLENBQUEsQ0FBQSxJQUEyQyxFQUF2RDtRQUNBLFVBQUEsRUFBYSxDQUFLLElBQUEsSUFBQSxDQUFBLENBQUwsQ0FBWSxDQUFDLE9BQWIsQ0FBQSxDQURiO09BSEY7TUFLQSxTQUFBLEVBQVksUUFMWjtNQU1BLEdBQUEsRUFDRTtRQUFBLE9BQUEsRUFBVSxDQUFWO1FBQ0EsU0FBQSxFQUFZLENBRFo7UUFFQSxPQUFBLEVBQVUsQ0FGVjtRQUdBLEtBQUEsRUFBUSxDQUhSO09BUEY7S0FERjtJQWFBLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQUEsQ0FBSDtNQUNFLFNBQVMsQ0FBQyxRQUFWLEdBQXFCO01BQ3JCLEtBQUssQ0FBQyxRQUFOLENBQWUsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFyQjtNQUNBLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBTCxDQUFVLGNBQVYsQ0FBeUIsQ0FBQyxJQUExQixDQUErQixJQUFDLENBQUEsSUFBSSxDQUFDLEtBQXJDO01BQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsY0FBVixDQUF5QixDQUFDLFdBQTFCLENBQXNDLFdBQXRDO01BQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsV0FBVixDQUFzQixDQUFDLE9BQXZCLENBQStCLEdBQS9CO01BRUEsT0FBQSxHQUFVLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBTCxDQUFVLGFBQVY7YUFFVixPQUFPLENBQUMsV0FBUixDQUFvQixNQUFwQixDQUEyQixDQUFDLFFBQTVCLENBQXFDLFNBQXJDLENBQStDLENBQUMsSUFBaEQsQ0FBcUQsSUFBQyxDQUFBLElBQUksQ0FBQyxPQUEzRCxFQVRGO0tBQUEsTUFBQTtNQVdFLEtBQUssQ0FBQyxRQUFOLENBQWUsWUFBZjthQUNBLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBTCxDQUFVLGNBQVYsQ0FBeUIsQ0FBQyxJQUExQixDQUErQiw0QkFBL0IsRUFaRjs7RUFkSSxDQVROO0VBc0NBLElBQUEsRUFBTSxTQUFBO1dBQ0osSUFBQyxDQUFBLElBQUQsR0FDRTtNQUFBLG9CQUFBLEVBQXVCLENBQUEsQ0FBRSxzQ0FBRixDQUF2QjtNQUNBLFVBQUEsRUFBdUIsQ0FBQSxDQUFFLDJCQUFGLENBRHZCO01BRUEsbUJBQUEsRUFBdUIsQ0FBQSxDQUFFLHFDQUFGLENBRnZCO01BSUEsTUFBQSxFQUF1QixDQUFBLENBQUUsd0JBQUYsQ0FKdkI7TUFLQSxTQUFBLEVBQXVCLENBQUEsQ0FBRSwyQkFBRixDQUx2QjtNQU9BLE9BQUEsRUFBdUIsQ0FBQSxDQUFFLDBCQUFGLENBUHZCO01BUUEsVUFBQSxFQUF1QixDQUFBLENBQUUsOEJBQUYsQ0FSdkI7O0VBRkUsQ0F0Q047RUFtREEsVUFBQSxFQUFZLFNBQUUsT0FBRjtJQUVWLElBQUMsQ0FBQSxJQUFELENBQUE7SUFFQSxJQUFDLENBQUEsS0FBRCxHQUFTLE9BQU8sQ0FBQztJQUNqQixJQUFDLENBQUEsVUFBRCxHQUFjLE9BQU8sQ0FBQztJQUN0QixJQUFDLENBQUEsS0FBRCxHQUFTO1dBQ1QsSUFBQyxDQUFBLGFBQUQsR0FBcUIsSUFBQSxhQUFBLENBQ25CO01BQUEsS0FBQSxFQUFjLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQTVCO01BQ0EsV0FBQSxFQUFjLEtBRGQ7S0FEbUI7RUFQWCxDQW5EWjtFQThEQSxNQUFBLEVBQVEsU0FBQTtJQUNOLENBQUEsQ0FBRSxlQUFGLENBQWtCLENBQUMsSUFBbkIsQ0FBQTtJQUNBLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBTCxDQUFVLE1BQUEsR0FDRixJQUFDLENBQUEsSUFBSSxDQUFDLGtCQURKLEdBQ3VCLHFDQUR2QixHQUd1QixJQUFDLENBQUEsSUFBSSxDQUFDLElBSDdCLEdBR2tDLHdEQUhsQyxHQUlzQyxJQUFDLENBQUEsSUFBSSxDQUFDLFFBSjVDLEdBSXFELHFGQUpyRCxHQVE0QyxJQUFDLENBQUEsSUFBSSxDQUFDLFFBUmxELEdBUTJELGtIQVIzRCxHQWFBLElBQUMsQ0FBQSxJQUFJLENBQUMsaUJBYk4sR0Fhd0IsMkRBYmxDO0lBa0JBLElBQUMsQ0FBQSxhQUFhLENBQUMsVUFBZixDQUEwQixJQUFDLENBQUEsR0FBRyxDQUFDLElBQUwsQ0FBVSxhQUFWLENBQTFCO0lBQ0EsSUFBQyxDQUFBLGFBQWEsQ0FBQyxNQUFmLENBQUE7V0FFQSxJQUFDLENBQUEsT0FBRCxDQUFTLFVBQVQ7RUF2Qk0sQ0E5RFI7RUF1RkEsT0FBQSxFQUFTLFNBQUE7V0FDUCxJQUFDLENBQUEsYUFBYSxDQUFDLEtBQWYsQ0FBQTtFQURPLENBdkZUO0NBRmdCIiwiZmlsZSI6Im1vZHVsZXMvcmVzdWx0L1Jlc3VsdEl0ZW1WaWV3LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiUmVzdWx0SXRlbVZpZXcgPSAgQmFja2JvbmUuTWFyaW9uZXR0ZS5Db21wb3NpdGVWaWV3LmV4dGVuZFxuXG4gIGNsYXNzTmFtZTogXCJyZXN1bHRfdmlld1wiXG5cbiAgZXZlbnRzOlxuICAgICdjbGljayAuc2F2ZScgICAgOiAnc2F2ZSdcbiAgICAnY2xpY2sgLmFub3RoZXInIDogJ2Fub3RoZXInXG5cbiAgYW5vdGhlcjogLT5cbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwicnVuTWFyL1wiICsgdGhpcy5tb2RlbC5nZXQoJ2Fzc2Vzc21lbnRJZCcpLCB0cmlnZ2VyOiB0cnVlXG5cbiAgc2F2ZTogLT5cbiAgICBAbW9kZWwuYWRkXG4gICAgICBuYW1lIDogXCJBc3Nlc3NtZW50IGNvbXBsZXRlXCJcbiAgICAgIHByb3RvdHlwZTogXCJjb21wbGV0ZVwiXG4gICAgICBkYXRhIDpcbiAgICAgICAgXCJjb21tZW50XCIgOiBAJGVsLmZpbmQoJyNhZGRpdGlvbmFsLWNvbW1lbnRzJykudmFsKCkgfHwgXCJcIlxuICAgICAgICBcImVuZF90aW1lXCIgOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpXG4gICAgICBzdWJ0ZXN0SWQgOiBcInJlc3VsdFwiXG4gICAgICBzdW0gOlxuICAgICAgICBjb3JyZWN0IDogMVxuICAgICAgICBpbmNvcnJlY3QgOiAwXG4gICAgICAgIG1pc3NpbmcgOiAwXG4gICAgICAgIHRvdGFsIDogMVxuXG4gICAgaWYgQG1vZGVsLnNhdmUoKVxuICAgICAgVGFuZ2VyaW5lLmFjdGl2aXR5ID0gXCJcIlxuICAgICAgVXRpbHMubWlkQWxlcnQgQHRleHQuc2F2ZWRcbiAgICAgIEAkZWwuZmluZCgnLnNhdmVfc3RhdHVzJykuaHRtbCBAdGV4dC5zYXZlZFxuICAgICAgQCRlbC5maW5kKCcuc2F2ZV9zdGF0dXMnKS5yZW1vdmVDbGFzcygnbm90X3NhdmVkJylcbiAgICAgIEAkZWwuZmluZCgnLnF1ZXN0aW9uJykuZmFkZU91dCgyNTApXG5cbiAgICAgICRidXR0b24gPSBAJGVsLmZpbmQoXCJidXR0b24uc2F2ZVwiKVxuXG4gICAgICAkYnV0dG9uLnJlbW92ZUNsYXNzKCdzYXZlJykuYWRkQ2xhc3MoJ2Fub3RoZXInKS5odG1sIEB0ZXh0LmFub3RoZXJcbiAgICBlbHNlXG4gICAgICBVdGlscy5taWRBbGVydCBcIlNhdmUgZXJyb3JcIlxuICAgICAgQCRlbC5maW5kKCcuc2F2ZV9zdGF0dXMnKS5odG1sIFwiUmVzdWx0cyBtYXkgbm90IGhhdmUgc2F2ZWRcIlxuXG5cbiAgaTE4bjogLT5cbiAgICBAdGV4dCA9XG4gICAgICBcImFzc2Vzc21lbnRDb21wbGV0ZVwiIDogdChcIlJlc3VsdFZpZXcubGFiZWwuYXNzZXNzbWVudF9jb21wbGV0ZVwiKVxuICAgICAgXCJjb21tZW50c1wiICAgICAgICAgICA6IHQoXCJSZXN1bHRWaWV3LmxhYmVsLmNvbW1lbnRzXCIpXG4gICAgICBcInN1YnRlc3RzQ29tcGxldGVkXCIgIDogdChcIlJlc3VsdFZpZXcubGFiZWwuc3VidGVzdHNfY29tcGxldGVkXCIpXG5cbiAgICAgIFwic2F2ZVwiICAgICAgICAgICAgICAgOiB0KFwiUmVzdWx0Vmlldy5idXR0b24uc2F2ZVwiKVxuICAgICAgXCJhbm90aGVyXCIgICAgICAgICAgICA6IHQoXCJSZXN1bHRWaWV3LmJ1dHRvbi5hbm90aGVyXCIpXG5cbiAgICAgIFwic2F2ZWRcIiAgICAgICAgICAgICAgOiB0KFwiUmVzdWx0Vmlldy5tZXNzYWdlLnNhdmVkXCIpXG4gICAgICBcIm5vdFNhdmVkXCIgICAgICAgICAgIDogdChcIlJlc3VsdFZpZXcubWVzc2FnZS5ub3Rfc2F2ZWRcIilcblxuXG4gIGluaXRpYWxpemU6ICggb3B0aW9ucyApIC0+XG5cbiAgICBAaTE4bigpXG5cbiAgICBAbW9kZWwgPSBvcHRpb25zLm1vZGVsXG4gICAgQGFzc2Vzc21lbnQgPSBvcHRpb25zLmFzc2Vzc21lbnRcbiAgICBAc2F2ZWQgPSBmYWxzZVxuICAgIEByZXN1bHRTdW1WaWV3ID0gbmV3IFJlc3VsdFN1bVZpZXdcbiAgICAgIG1vZGVsICAgICAgIDogQG1vZGVsLnBhcmVudC5yZXN1bHRcbiAgICAgIGZpbmlzaENoZWNrIDogZmFsc2VcblxuICByZW5kZXI6IC0+XG4gICAgJChcIi5zdWJ0ZXN0LW5leHRcIikuaGlkZSgpXG4gICAgQCRlbC5odG1sIFwiXG4gICAgICA8aDI+I3tAdGV4dC5hc3Nlc3NtZW50Q29tcGxldGV9PC9oMj5cblxuICAgICAgPGJ1dHRvbiBjbGFzcz0nc2F2ZSBjb21tYW5kJz4je0B0ZXh0LnNhdmV9PC9idXR0b24+XG4gICAgICA8ZGl2IGNsYXNzPSdpbmZvX2JveCBzYXZlX3N0YXR1cyBub3Rfc2F2ZWQnPiN7QHRleHQubm90U2F2ZWR9PC9kaXY+XG4gICAgICA8YnI+XG5cbiAgICAgIDxkaXYgY2xhc3M9J3F1ZXN0aW9uJz5cbiAgICAgICAgPGxhYmVsIGNsYXNzPSdwcm9tcHQnIGZvcj0nYWRkaXRpb25hbC1jb21tZW50cyc+I3tAdGV4dC5jb21tZW50c308L2xhYmVsPlxuICAgICAgICA8dGV4dGFyZWEgaWQ9J2FkZGl0aW9uYWwtY29tbWVudHMnIGNsYXNzPSdmdWxsX3dpZHRoJz48L3RleHRhcmVhPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGgyPiN7QHRleHQuc3VidGVzdHNDb21wbGV0ZWR9PC9oMj5cbiAgICAgICAgPGRpdiBpZD0ncmVzdWx0X3N1bScgY2xhc3M9J2luZm9fYm94Jz48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIFwiXG5cbiAgICBAcmVzdWx0U3VtVmlldy5zZXRFbGVtZW50KEAkZWwuZmluZChcIiNyZXN1bHRfc3VtXCIpKVxuICAgIEByZXN1bHRTdW1WaWV3LnJlbmRlcigpXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICBvbkNsb3NlOiAtPlxuICAgIEByZXN1bHRTdW1WaWV3LmNsb3NlKClcbiJdfQ==
