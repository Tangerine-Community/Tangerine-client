var ResultItemView;

ResultItemView = Backbone.Marionette.CompositeView.extend({
  className: "result_view",
  events: {
    'click .save': 'save',
    'click .another': 'another'
  },
  another: function() {
    var d, timestamp;
    d = new Date();
    timestamp = d.getTime();
    return Tangerine.router.navigate("runMar/" + this.model.get('assessmentId') + "?" + timestamp, {
      trigger: true
    });
  },
  save: function() {
    var $button;
    this.model.add({
      name: "Assessment complete",
      prototype: "complete",
      data: {
        "comment": this.$el.find('#additional-comments').val() || "",
        "end_time": (new Date()).getTime()
      },
      subtestId: "result",
      sum: {
        correct: 1,
        incorrect: 0,
        missing: 0,
        total: 1
      }
    });
    if (this.model.save()) {
      Tangerine.activity = "";
      Utils.midAlert(this.text.saved);
      this.$el.find('.save_status').html(this.text.saved);
      this.$el.find('.save_status').removeClass('not_saved');
      this.$el.find('.question').fadeOut(250);
      $button = this.$el.find("button.save");
      return $button.removeClass('save').addClass('another').html(this.text.another);
    } else {
      Utils.midAlert("Save error");
      return this.$el.find('.save_status').html("Results may not have saved");
    }
  },
  i18n: function() {
    return this.text = {
      "assessmentComplete": t("ResultView.label.assessment_complete"),
      "comments": t("ResultView.label.comments"),
      "subtestsCompleted": t("ResultView.label.subtests_completed"),
      "save": t("ResultView.button.save"),
      "another": t("ResultView.button.another"),
      "saved": t("ResultView.message.saved"),
      "notSaved": t("ResultView.message.not_saved")
    };
  },
  initialize: function(options) {
    Tangerine.progress.currentSubview = this;
    this.i18n();
    this.model = options.model;
    this.assessment = options.assessment;
    this.saved = false;
    return this.resultSumView = new ResultSumView({
      model: this.model.parent.result,
      finishCheck: false
    });
  },
  render: function() {
    $(".subtest-next").hide();
    this.$el.html("<h2>" + this.text.assessmentComplete + "</h2> <button class='save command'>" + this.text.save + "</button> <div class='info_box save_status not_saved'>" + this.text.notSaved + "</div> <br> <div class='question'> <label class='prompt' for='additional-comments'>" + this.text.comments + "</label> <textarea id='additional-comments' class='full_width'></textarea> </div> <div class='label_value'> <h2>" + this.text.subtestsCompleted + "</h2> <div id='result_sum' class='info_box'></div> </div>");
    this.resultSumView.setElement(this.$el.find("#result_sum"));
    this.resultSumView.render();
    return this.trigger("rendered");
  },
  onClose: function() {
    return this.resultSumView.close();
  }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvcmVzdWx0L1Jlc3VsdEl0ZW1WaWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLGNBQUEsR0FBa0IsUUFBUSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsTUFBbEMsQ0FFaEI7RUFBQSxTQUFBLEVBQVcsYUFBWDtFQUVBLE1BQUEsRUFDRTtJQUFBLGFBQUEsRUFBbUIsTUFBbkI7SUFDQSxnQkFBQSxFQUFtQixTQURuQjtHQUhGO0VBTUEsT0FBQSxFQUFTLFNBQUE7QUFDUCxRQUFBO0lBQUEsQ0FBQSxHQUFRLElBQUEsSUFBQSxDQUFBO0lBQ1IsU0FBQSxHQUFZLENBQUMsQ0FBQyxPQUFGLENBQUE7V0FDWixTQUFTLENBQUMsTUFBTSxDQUFDLFFBQWpCLENBQTBCLFNBQUEsR0FBWSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQVgsQ0FBZSxjQUFmLENBQVosR0FBNkMsR0FBN0MsR0FBbUQsU0FBN0UsRUFBd0Y7TUFBQSxPQUFBLEVBQVMsSUFBVDtLQUF4RjtFQUhPLENBTlQ7RUFXQSxJQUFBLEVBQU0sU0FBQTtBQUNKLFFBQUE7SUFBQSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FDRTtNQUFBLElBQUEsRUFBTyxxQkFBUDtNQUNBLFNBQUEsRUFBVyxVQURYO01BRUEsSUFBQSxFQUNFO1FBQUEsU0FBQSxFQUFZLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBTCxDQUFVLHNCQUFWLENBQWlDLENBQUMsR0FBbEMsQ0FBQSxDQUFBLElBQTJDLEVBQXZEO1FBQ0EsVUFBQSxFQUFhLENBQUssSUFBQSxJQUFBLENBQUEsQ0FBTCxDQUFZLENBQUMsT0FBYixDQUFBLENBRGI7T0FIRjtNQUtBLFNBQUEsRUFBWSxRQUxaO01BTUEsR0FBQSxFQUNFO1FBQUEsT0FBQSxFQUFVLENBQVY7UUFDQSxTQUFBLEVBQVksQ0FEWjtRQUVBLE9BQUEsRUFBVSxDQUZWO1FBR0EsS0FBQSxFQUFRLENBSFI7T0FQRjtLQURGO0lBYUEs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Q0FBQyxLQUFmLENBQUE7RUFETyxDQTFGVDtDQUZnQiIsImZpbGUiOiJtb2R1bGVzL3Jlc3VsdC9SZXN1bHRJdGVtVmlldy5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIlJlc3VsdEl0ZW1WaWV3ID0gIEJhY2tib25lLk1hcmlvbmV0dGUuQ29tcG9zaXRlVmlldy5leHRlbmRcblxuICBjbGFzc05hbWU6IFwicmVzdWx0X3ZpZXdcIlxuXG4gIGV2ZW50czpcbiAgICAnY2xpY2sgLnNhdmUnICAgIDogJ3NhdmUnXG4gICAgJ2NsaWNrIC5hbm90aGVyJyA6ICdhbm90aGVyJ1xuXG4gIGFub3RoZXI6IC0+XG4gICAgZCA9IG5ldyBEYXRlKCk7XG4gICAgdGltZXN0YW1wID0gZC5nZXRUaW1lKCk7XG4gICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZSBcInJ1bk1hci9cIiArIHRoaXMubW9kZWwuZ2V0KCdhc3Nlc3NtZW50SWQnKSArIFwiP1wiICsgdGltZXN0YW1wLCB0cmlnZ2VyOiB0cnVlXG5cbiAgc2F2ZTogLT5cbiAgICBAbW9kZWwuYWRkXG4gICAgICBuYW1lIDogXCJBc3Nlc3NtZW50IGNvbXBsZXRlXCJcbiAgICAgIHByb3RvdHlwZTogXCJjb21wbGV0ZVwiXG4gICAgICBkYXRhIDpcbiAgICAgICAgXCJjb21tZW50XCIgOiBAJGVsLmZpbmQoJyNhZGRpdGlvbmFsLWNvbW1lbnRzJykudmFsKCkgfHwgXCJcIlxuICAgICAgICBcImVuZF90aW1lXCIgOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpXG4gICAgICBzdWJ0ZXN0SWQgOiBcInJlc3VsdFwiXG4gICAgICBzdW0gOlxuICAgICAgICBjb3JyZWN0IDogMVxuICAgICAgICBpbmNvcnJlY3QgOiAwXG4gICAgICAgIG1pc3NpbmcgOiAwXG4gICAgICAgIHRvdGFsIDogMVxuXG4gICAgaWYgQG1vZGVsLnNhdmUoKVxuICAgICAgVGFuZ2VyaW5lLmFjdGl2aXR5ID0gXCJcIlxuICAgICAgVXRpbHMubWlkQWxlcnQgQHRleHQuc2F2ZWRcbiAgICAgIEAkZWwuZmluZCgnLnNhdmVfc3RhdHVzJykuaHRtbCBAdGV4dC5zYXZlZFxuICAgICAgQCRlbC5maW5kKCcuc2F2ZV9zdGF0dXMnKS5yZW1vdmVDbGFzcygnbm90X3NhdmVkJylcbiAgICAgIEAkZWwuZmluZCgnLnF1ZXN0aW9uJykuZmFkZU91dCgyNTApXG5cbiAgICAgICRidXR0b24gPSBAJGVsLmZpbmQoXCJidXR0b24uc2F2ZVwiKVxuXG4gICAgICAkYnV0dG9uLnJlbW92ZUNsYXNzKCdzYXZlJykuYWRkQ2xhc3MoJ2Fub3RoZXInKS5odG1sIEB0ZXh0LmFub3RoZXJcbiAgICBlbHNlXG4gICAgICBVdGlscy5taWRBbGVydCBcIlNhdmUgZXJyb3JcIlxuICAgICAgQCRlbC5maW5kKCcuc2F2ZV9zdGF0dXMnKS5odG1sIFwiUmVzdWx0cyBtYXkgbm90IGhhdmUgc2F2ZWRcIlxuXG5cbiAgaTE4bjogLT5cbiAgICBAdGV4dCA9XG4gICAgICBcImFzc2Vzc21lbnRDb21wbGV0ZVwiIDogdChcIlJlc3VsdFZpZXcubGFiZWwuYXNzZXNzbWVudF9jb21wbGV0ZVwiKVxuICAgICAgXCJjb21tZW50c1wiICAgICAgICAgICA6IHQoXCJSZXN1bHRWaWV3LmxhYmVsLmNvbW1lbnRzXCIpXG4gICAgICBcInN1YnRlc3RzQ29tcGxldGVkXCIgIDogdChcIlJlc3VsdFZpZXcubGFiZWwuc3VidGVzdHNfY29tcGxldGVkXCIpXG5cbiAgICAgIFwic2F2ZVwiICAgICAgICAgICAgICAgOiB0KFwiUmVzdWx0Vmlldy5idXR0b24uc2F2ZVwiKVxuICAgICAgXCJhbm90aGVyXCIgICAgICAgICAgICA6IHQoXCJSZXN1bHRWaWV3LmJ1dHRvbi5hbm90aGVyXCIpXG5cbiAgICAgIFwic2F2ZWRcIiAgICAgICAgICAgICAgOiB0KFwiUmVzdWx0Vmlldy5tZXNzYWdlLnNhdmVkXCIpXG4gICAgICBcIm5vdFNhdmVkXCIgICAgICAgICAgIDogdChcIlJlc3VsdFZpZXcubWVzc2FnZS5ub3Rfc2F2ZWRcIilcblxuXG4gIGluaXRpYWxpemU6ICggb3B0aW9ucyApIC0+XG5cbiAgICBUYW5nZXJpbmUucHJvZ3Jlc3MuY3VycmVudFN1YnZpZXcgPSBAXG4gICAgQGkxOG4oKVxuXG4gICAgQG1vZGVsID0gb3B0aW9ucy5tb2RlbFxuICAgIEBhc3Nlc3NtZW50ID0gb3B0aW9ucy5hc3Nlc3NtZW50XG4gICAgQHNhdmVkID0gZmFsc2VcbiAgICBAcmVzdWx0U3VtVmlldyA9IG5ldyBSZXN1bHRTdW1WaWV3XG4gICAgICBtb2RlbCAgICAgICA6IEBtb2RlbC5wYXJlbnQucmVzdWx0XG4gICAgICBmaW5pc2hDaGVjayA6IGZhbHNlXG5cbiAgcmVuZGVyOiAtPlxuICAgICQoXCIuc3VidGVzdC1uZXh0XCIpLmhpZGUoKVxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGgyPiN7QHRleHQuYXNzZXNzbWVudENvbXBsZXRlfTwvaDI+XG5cbiAgICAgIDxidXR0b24gY2xhc3M9J3NhdmUgY29tbWFuZCc+I3tAdGV4dC5zYXZlfTwvYnV0dG9uPlxuICAgICAgPGRpdiBjbGFzcz0naW5mb19ib3ggc2F2ZV9zdGF0dXMgbm90X3NhdmVkJz4je0B0ZXh0Lm5vdFNhdmVkfTwvZGl2PlxuICAgICAgPGJyPlxuXG4gICAgICA8ZGl2IGNsYXNzPSdxdWVzdGlvbic+XG4gICAgICAgIDxsYWJlbCBjbGFzcz0ncHJvbXB0JyBmb3I9J2FkZGl0aW9uYWwtY29tbWVudHMnPiN7QHRleHQuY29tbWVudHN9PC9sYWJlbD5cbiAgICAgICAgPHRleHRhcmVhIGlkPSdhZGRpdGlvbmFsLWNvbW1lbnRzJyBjbGFzcz0nZnVsbF93aWR0aCc+PC90ZXh0YXJlYT5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxoMj4je0B0ZXh0LnN1YnRlc3RzQ29tcGxldGVkfTwvaDI+XG4gICAgICAgIDxkaXYgaWQ9J3Jlc3VsdF9zdW0nIGNsYXNzPSdpbmZvX2JveCc+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBcIlxuXG4gICAgQHJlc3VsdFN1bVZpZXcuc2V0RWxlbWVudChAJGVsLmZpbmQoXCIjcmVzdWx0X3N1bVwiKSlcbiAgICBAcmVzdWx0U3VtVmlldy5yZW5kZXIoKVxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgb25DbG9zZTogLT5cbiAgICBAcmVzdWx0U3VtVmlldy5jbG9zZSgpXG4iXX0=
