var SubtestRunItemView;

SubtestRunItemView = Backbone.Marionette.ItemView.extend({
  tagName: 'p',
  template: JST["SubtestRunItemView"],
  className: "SubtestRunView",
  events: {
    'click .subtest-next': 'next',
    'click .subtest-back': 'back',
    'click .subtest_help': 'toggleHelp',
    'click .skip': 'skip'
  },
  toggleHelp: function() {
    return this.$el.find(".enumerator_help").fadeToggle(250);
  },
  i18n: function() {
    return this.text = {
      "next": t("SubtestRunView.button.next"),
      "back": t("SubtestRunView.button.back"),
      "skip": t("SubtestRunView.button.skip"),
      "help": t("SubtestRunView.button.help")
    };
  },
  initialize: function(options) {
    var backable, skippable, ui;
    this.i18n();
    this.model = options.model;
    this.parent = this.model.parent;
    if (this.model.get("fontFamily") !== "") {
      this.fontStyle = "style=\"font-family: " + (this.model.get('fontFamily')) + " !important;\"";
    }
    this.prototypeRendered = false;
    this.delegateEvents();
    ui = {};
    ui.enumeratorHelp = (this.model.get("enumeratorHelp") || "") !== "" ? "<button class='subtest_help command'>" + this.text.help + "</button><div class='enumerator_help' " + (this.fontStyle || "") + ">" + (this.model.get('enumeratorHelp')) + "</div>" : "";
    ui.studentDialog = (this.model.get("studentDialog") || "") !== "" ? "<div class='student_dialog' " + (this.fontStyle || "") + ">" + (this.model.get('studentDialog')) + "</div>" : "";
    ui.transitionComment = (this.model.get("transitionComment") || "") !== "" ? "<div class='student_dialog' " + (this.fontStyle || "") + ">" + (this.model.get('transitionComment')) + "</div> <br>" : "";
    skippable = this.model.get("skippable") === true || this.model.get("skippable") === "true";
    backable = (this.model.get("backButton") === true || this.model.get("backButton") === "true") && this.parent.index !== 0;
    if (skippable) {
      ui.skipButton = "<button class='skip navigation'>" + this.text.skip + "</button>";
    }
    if (backable) {
      ui.backButton = "<button class='subtest-back navigation'>" + this.text.back + "</button>";
    }
    ui.text = this.text;
    return this.model.set('ui', ui);
  },
  onRender: function() {
    var _render, languageCode;
    _render = (function(_this) {
      return function() {
        console.log(_this.model);
        _this.prototypeView = new window[(_this.model.get('prototype').titleize()) + "RunView"]({
          model: _this.model,
          parent: _this
        });
        _this.prototypeView.on("rendered", function() {
          return _this.flagRender("prototype");
        });
        _this.prototypeView.on("subRendered", function() {
          return _this.trigger("subRendered");
        });
        _this.prototypeView.on("showNext", function() {
          return _this.showNext();
        });
        _this.prototypeView.on("hideNext", function() {
          return _this.hideNext();
        });
        _this.prototypeView.on("ready", function() {
          return _this.prototypeRendered = true;
        });
        _this.prototypeView.setElement(_this.$el.find('#prototype_wrapper'));
        _this.prototypeView.render();
        return _this.flagRender("subtest");
      };
    })(this);
    languageCode = this.model.get("language");
    if (languageCode) {
      return i18n.setLng(languageCode, (function(_this) {
        return function(t) {
          window.t = t;
          return _render();
        };
      })(this));
    } else {
      return i18n.setLng(Tangerine.settings.get("language"), (function(_this) {
        return function(t) {
          return _render();
        };
      })(this));
    }
  },
  flagRender: (function(_this) {
    return function(flag) {
      if (!_this.renderFlags) {
        _this.renderFlags = {};
      }
      _this.renderFlags[flag] = true;
      if (_this.renderFlags['subtest'] && _this.renderFlags['prototype']) {
        return _this.trigger("rendered");
      }
    };
  })(this),
  afterRender: (function(_this) {
    return function() {
      var ref;
      if ((ref = _this.prototypeView) != null) {
        if (typeof ref.afterRender === "function") {
          ref.afterRender();
        }
      }
      return _this.onShow();
    };
  })(this),
  showNext: (function(_this) {
    return function() {
      return _this.$el.find(".controlls").show();
    };
  })(this),
  hideNext: (function(_this) {
    return function() {
      return _this.$el.find(".controlls").hide();
    };
  })(this),
  onShow: function() {
    var displayCode, error, error1, message, name, ref;
    displayCode = this.model.getString("displayCode");
    if (!_.isEmptyString(displayCode)) {
      try {
        CoffeeScript["eval"].apply(this, [displayCode]);
      } catch (error1) {
        error = error1;
        name = (/function (.{1,})\(/.exec(error.constructor.toString())[1]);
        message = error.message;
        alert(name + "\n\n" + message);
        console.log("displayCode Error: " + JSON.stringify(error));
      }
    }
    return (ref = this.prototypeView) != null ? typeof ref.updateExecuteReady === "function" ? ref.updateExecuteReady(true) : void 0 : void 0;
  },
  getGridScore: function() {
    var grid, gridScore, link;
    link = this.model.get("gridLinkId") || "";
    if (link === "") {
      return;
    }
    grid = this.parent.model.subtests.get(this.model.get("gridLinkId"));
    gridScore = this.parent.result.getGridScore(grid.id);
    return gridScore;
  },
  gridWasAutostopped: function() {
    var grid, gridWasAutostopped, link;
    link = this.model.get("gridLinkId") || "";
    if (link === "") {
      return;
    }
    grid = this.parent.model.subtests.get(this.model.get("gridLinkId"));
    return gridWasAutostopped = this.parent.result.gridWasAutostopped(grid.id);
  },
  onClose: function() {
    var ref;
    return (ref = this.prototypeView) != null ? typeof ref.close === "function" ? ref.close() : void 0 : void 0;
  },
  isValid: function() {
    if (!this.prototypeRendered) {
      return false;
    }
    if (this.prototypeView.isValid != null) {
      return this.prototypeView.isValid();
    } else {
      return false;
    }
    return true;
  },
  showErrors: function() {
    return this.prototypeView.showErrors();
  },
  getSum: function() {
    if (this.prototypeView.getSum != null) {
      return this.prototypeView.getSum();
    } else {
      return {
        correct: 0,
        incorrect: 0,
        missing: 0,
        total: 0
      };
    }
  },
  abort: function() {
    return this.parent.abort();
  },
  getResult: function() {
    var hash, result;
    result = this.prototypeView.getResult();
    if (this.model.has("hash")) {
      hash = this.model.get("hash");
    }
    return {
      'body': result,
      'meta': {
        'hash': hash
      }
    };
  },
  getSkipped: function() {
    if (this.prototypeView.getSkipped != null) {
      return this.prototypeView.getSkipped();
    } else {
      throw "Prototype skipping not implemented";
    }
  },
  next: function() {
    return this.trigger("next");
  },
  back: function() {
    return this.trigger("back");
  },
  skip: function() {
    return this.parent.skip();
  }
});

//# sourceMappingURL=data:application/json;base64,
