var IdRunItemView;

IdRunItemView = Backbone.Marionette.ItemView.extend({
  template: JST["ItemView"],
  className: "idItem",
  events: {
    'click #generate': 'generate',
    'change #participant_id': 'setValidator'
  },
  i18n: function() {
    return this.text = {
      identifier: t("IdRunView.label.identifier"),
      generate: t("IdRunView.button.generate"),
      "help": t("SubtestRunView.button.help")
    };
  },
  initialize: function(options) {
    var labels;
    this.i18n();
    this.model = options.model;
    this.parent = options.parent;
    this.dataEntry = options.dataEntry;
    this.validator = new CheckDigit;
    Tangerine.progress.currentSubview = this;
    labels = {};
    labels.text = this.text;
    return this.model.set('labels', labels);
  },
  render: function() {
    var participantId, previous;
    if (!this.dataEntry) {
      previous = this.model.parent.result.getByHash(this.model.get('hash'));
      if (previous) {
        participantId = previous.participant_id;
      }
    }
    this.$el.html("<form> <label for='participant_id'>" + this.text.identifier + "</label> <input id='participant_id' name='participant_id' value='" + (participantId || '') + "'> <button id='generate' class='command'>" + this.text.generate + "</button> <div class='messages'></div> </form>");
    this.trigger("rendered");
    return this.trigger("ready");
  },
  getResult: function() {
    var hash, result, subtestResult;
    result = {
      'participant_id': this.$el.find("#participant_id").val()
    };
    if (this.model.has("hash")) {
      hash = this.model.get("hash");
    }
    return subtestResult = {
      'body': result,
      'meta': {
        'hash': hash
      }
    };
  },
  getSkipped: function() {
    return {
      'participant_id': "skipped"
    };
  },
  setValidator: function() {
    return this.validator.set(this.getResult()['body']['participant_id']);
  },
  isValid: function() {
    this.setValidator();
    if (!this.validator.isValid()) {
      return false;
    }
    return this.updateNavigation();
  },
  testValid: function() {
    if (this.isValid != null) {
      return this.isValid();
    } else {
      return false;
    }
    return true;
  },
  showErrors: function() {
    return this.$el.find(".messages").html(this.validator.getErrors().join(", "));
  },
  generate: function() {
    this.$el.find(".messages").empty();
    this.$el.find('#participant_id').val(this.validator.generate());
    return false;
  },
  updateNavigation: function() {
    return Tangerine.nav.setStudent(this.getResult()['body']['participant_id']);
  },
  getSum: function() {
    console.log("This view does not return a sum, correct?");
    return {
      correct: 0,
      incorrect: 0,
      missing: 0,
      total: 0
    };
  }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvc3VidGVzdC9wcm90b3R5cGVzL0lkUnVuSXRlbVZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsYUFBQSxHQUFnQixRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUE3QixDQUNkO0VBQUEsUUFBQSxFQUFVLEdBQUksQ0FBQSxVQUFBLENBQWQ7RUFFQSxTQUFBLEVBQVcsUUFGWDtFQUlBLE1BQUEsRUFDRTtJQUFBLGlCQUFBLEVBQTJCLFVBQTNCO0lBQ0Esd0JBQUEsRUFBMkIsY0FEM0I7R0FMRjtFQVFBLElBQUEsRUFBTSxTQUFBO1dBQ0osSUFBQyxDQUFBLElBQUQsR0FDRTtNQUFBLFVBQUEsRUFBYSxDQUFBLENBQUUsNEJBQUYsQ0FBYjtNQUNBLFFBQUEsRUFBYSxDQUFBLENBQUUsMkJBQUYsQ0FEYjtNQUVBLE1BQUEsRUFBUyxDQUFBLENBQUUsNEJBQUYsQ0FGVDs7RUFGRSxDQVJOO0VBY0EsVUFBQSxFQUFZLFNBQUMsT0FBRDtBQUlWLFFBQUE7SUFBQSxJQUFDLENBQUEsSUFBRCxDQUFBO0lBRUEsSUFBQyxDQUFBLEtBQUQsR0FBVSxPQUFPLENBQUM7SUFDbEIsSUFBQyxDQUFBLE1BQUQsR0FBVSxPQUFPLENBQUM7SUFDbEIsSUFBQyxDQUFBLFNBQUQsR0FBYSxPQUFPLENBQUM7SUFFckIsSUFBQyxDQUFBLFNBQUQsR0FBYSxJQUFJO0lBQ2pCLFNBQVMsQ0FBQyxRQUFRLENBQUMsY0FBbkIsR0FBb0M7SUFDcEMsTUFBQSxHQUFTO0lBQ1QsTUFBTSxDQUFDLElBQVAsR0FBYyxJQUFDLENBQUE7V0FDZixJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxRQUFYLEVBQXFCLE1BQXJCO0VBZFUsQ0FkWjtFQThCQSxNQUFBLEVBQVEsU0FBQTtBQUVOLFFBQUE7SUFBQSxJQUFBLENBQU8sSUFBQyxDQUFBLFNBQVI7TUFDRSxRQUFBLEdBQVcsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFN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IiwiZmlsZSI6Im1vZHVsZXMvc3VidGVzdC9wcm90b3R5cGVzL0lkUnVuSXRlbVZpZXcuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJJZFJ1bkl0ZW1WaWV3ID0gQmFja2JvbmUuTWFyaW9uZXR0ZS5JdGVtVmlldy5leHRlbmRcbiAgdGVtcGxhdGU6IEpTVFtcIkl0ZW1WaWV3XCJdLFxuXG4gIGNsYXNzTmFtZTogXCJpZEl0ZW1cIlxuXG4gIGV2ZW50czpcbiAgICAnY2xpY2sgI2dlbmVyYXRlJyAgICAgICAgOiAnZ2VuZXJhdGUnXG4gICAgJ2NoYW5nZSAjcGFydGljaXBhbnRfaWQnIDogJ3NldFZhbGlkYXRvcidcblxuICBpMThuOiAtPlxuICAgIEB0ZXh0ID1cbiAgICAgIGlkZW50aWZpZXIgOiB0KFwiSWRSdW5WaWV3LmxhYmVsLmlkZW50aWZpZXJcIilcbiAgICAgIGdlbmVyYXRlICAgOiB0KFwiSWRSdW5WaWV3LmJ1dHRvbi5nZW5lcmF0ZVwiKVxuICAgICAgXCJoZWxwXCIgOiB0KFwiU3VidGVzdFJ1blZpZXcuYnV0dG9uLmhlbHBcIilcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cblxuIyAgICBjb25zb2xlLmxvZyBvcHRpb25zXG5cbiAgICBAaTE4bigpXG5cbiAgICBAbW9kZWwgID0gb3B0aW9ucy5tb2RlbFxuICAgIEBwYXJlbnQgPSBvcHRpb25zLnBhcmVudFxuICAgIEBkYXRhRW50cnkgPSBvcHRpb25zLmRhdGFFbnRyeVxuXG4gICAgQHZhbGlkYXRvciA9IG5ldyBDaGVja0RpZ2l0XG4gICAgVGFuZ2VyaW5lLnByb2dyZXNzLmN1cnJlbnRTdWJ2aWV3ID0gQFxuICAgIGxhYmVscyA9IHt9XG4gICAgbGFiZWxzLnRleHQgPSBAdGV4dFxuICAgIEBtb2RlbC5zZXQoJ2xhYmVscycsIGxhYmVscylcblxuICByZW5kZXI6IC0+XG5cbiAgICB1bmxlc3MgQGRhdGFFbnRyeVxuICAgICAgcHJldmlvdXMgPSBAbW9kZWwucGFyZW50LnJlc3VsdC5nZXRCeUhhc2goQG1vZGVsLmdldCgnaGFzaCcpKVxuICAgICAgaWYgcHJldmlvdXNcbiAgICAgICAgcGFydGljaXBhbnRJZCA9IHByZXZpb3VzLnBhcnRpY2lwYW50X2lkXG5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICA8Zm9ybT5cbiAgICAgIDxsYWJlbCBmb3I9J3BhcnRpY2lwYW50X2lkJz4je0B0ZXh0LmlkZW50aWZpZXJ9PC9sYWJlbD5cbiAgICAgIDxpbnB1dCBpZD0ncGFydGljaXBhbnRfaWQnIG5hbWU9J3BhcnRpY2lwYW50X2lkJyB2YWx1ZT0nI3twYXJ0aWNpcGFudElkfHwnJ30nPlxuICAgICAgPGJ1dHRvbiBpZD0nZ2VuZXJhdGUnIGNsYXNzPSdjb21tYW5kJz4je0B0ZXh0LmdlbmVyYXRlfTwvYnV0dG9uPlxuICAgICAgPGRpdiBjbGFzcz0nbWVzc2FnZXMnPjwvZGl2PlxuICAgIDwvZm9ybT5cIlxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuICAgIEB0cmlnZ2VyIFwicmVhZHlcIlxuXG4gIGdldFJlc3VsdDogLT5cbiAgICByZXN1bHQgPSAgeyAncGFydGljaXBhbnRfaWQnIDogQCRlbC5maW5kKFwiI3BhcnRpY2lwYW50X2lkXCIpLnZhbCgpIH1cbiAgICBoYXNoID0gQG1vZGVsLmdldChcImhhc2hcIikgaWYgQG1vZGVsLmhhcyhcImhhc2hcIilcbiAgICBzdWJ0ZXN0UmVzdWx0ID1cbiAgICAgICdib2R5JyA6IHJlc3VsdFxuICAgICAgJ21ldGEnIDpcbiAgICAgICAgJ2hhc2gnIDogaGFzaFxuXG4gIGdldFNraXBwZWQ6IC0+XG4gICAgcmV0dXJuIHsgJ3BhcnRpY2lwYW50X2lkJyA6IFwic2tpcHBlZFwiIH1cblxuICBzZXRWYWxpZGF0b3I6IC0+XG4gICAgQHZhbGlkYXRvci5zZXQgQGdldFJlc3VsdCgpWydib2R5J11bJ3BhcnRpY2lwYW50X2lkJ11cblxuICBpc1ZhbGlkOiAtPlxuICAgIEBzZXRWYWxpZGF0b3IoKVxuICAgIHJldHVybiBmYWxzZSBpZiBub3QgQHZhbGlkYXRvci5pc1ZhbGlkKClcbiAgICBAdXBkYXRlTmF2aWdhdGlvbigpXG5cbiAgdGVzdFZhbGlkOiAtPlxuIyAgICBjb25zb2xlLmxvZyhcIklkUmluSXRlbVZpZXcgdGVzdFZhbGlkLlwiKVxuIyAgICBpZiBub3QgQHByb3RvdHlwZVJlbmRlcmVkIHRoZW4gcmV0dXJuIGZhbHNlXG4jICAgIGN1cnJlbnRWaWV3ID0gVGFuZ2VyaW5lLnByb2dyZXNzLmN1cnJlbnRTdWJ2aWV3XG4gICAgaWYgQGlzVmFsaWQ/XG4gICAgICByZXR1cm4gQGlzVmFsaWQoKVxuICAgIGVsc2VcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIHRydWVcblxuICBzaG93RXJyb3JzOiAtPlxuICAgIEAkZWwuZmluZChcIi5tZXNzYWdlc1wiKS5odG1sIEB2YWxpZGF0b3IuZ2V0RXJyb3JzKCkuam9pbihcIiwgXCIpXG5cbiAgZ2VuZXJhdGU6IC0+XG4gICAgQCRlbC5maW5kKFwiLm1lc3NhZ2VzXCIpLmVtcHR5KClcbiAgICBAJGVsLmZpbmQoJyNwYXJ0aWNpcGFudF9pZCcpLnZhbCBAdmFsaWRhdG9yLmdlbmVyYXRlKClcbiAgICBmYWxzZVxuXG4gIHVwZGF0ZU5hdmlnYXRpb246IC0+XG4gICAgVGFuZ2VyaW5lLm5hdi5zZXRTdHVkZW50IEBnZXRSZXN1bHQoKVsnYm9keSddWydwYXJ0aWNpcGFudF9pZCddXG5cbiAgZ2V0U3VtOiAtPlxuIyAgICBpZiBAcHJvdG90eXBlVmlldy5nZXRTdW0/XG4jICAgICAgcmV0dXJuIEBwcm90b3R5cGVWaWV3LmdldFN1bSgpXG4jICAgIGVsc2VcbiMgbWF5YmUgYSBiZXR0ZXIgZmFsbGJhY2tcbiAgICBjb25zb2xlLmxvZyhcIlRoaXMgdmlldyBkb2VzIG5vdCByZXR1cm4gYSBzdW0sIGNvcnJlY3Q/XCIpXG4gICAgcmV0dXJuIHtjb3JyZWN0OjAsaW5jb3JyZWN0OjAsbWlzc2luZzowLHRvdGFsOjB9XG4iXX0=
