var AssessmentCompositeView;

AssessmentCompositeView = Backbone.Marionette.CompositeView.extend({
  template: JST["AssessmentView"],
  getChildView: function(model) {
    var currentSubview, prototypeName;
    model.parent = this;
    if (!model.questions) {
      model.questions = new Questions();
    }
    if (model.get("collection") === 'result') {
      currentSubview = ResultItemView;
    } else {
      prototypeName = model.get('prototype').titleize() + "RunItemView";
      if (prototypeName === 'SurveyRunItemView') {
        currentSubview = SurveyRunItemView;
      } else if (prototypeName === 'GridRunItemView') {
        currentSubview = GridRunItemView;
      } else if (prototypeName === 'DatetimeRunItemView') {
        currentSubview = DatetimeRunItemView;
      } else if (prototypeName === 'IdRunItemView') {
        currentSubview = IdRunItemView;
      } else if (prototypeName === 'LocationRunItemView') {
        currentSubview = LocationRunItemView;
      } else if (prototypeName === 'ConsentRunItemView') {
        currentSubview = ConsentRunItemView;
      } else {
        currentSubview = null;
        console.log(prototypeName + "  Subview is not defined.");
      }
    }
    this.ready = true;
    return currentSubview;
    return {
      next: function() {
        console.log("childEvents next");
        return this.step(1);
      }
    };
  },
  childViewOptions: function(model, index) {
    return model.questions.fetch({
      viewOptions: {
        key: "question-" + model.id
      },
      success: (function(_this) {
        return function(collection) {
          model.questions.sort();
          model.collection = model.questions;
          return _this.collection.models = collection.models;
        };
      })(this),
      error: function(model, err, cb) {
        return console.log("childViewOptions error: " + JSON.stringify(err));
      }
    });
  },
  collectionEvents: function() {
    return {
      "add": function() {
        return console.log("model added");
      }
    };
  },
  childViewContainer: '#subtest_wrapper',
  events: {
    'click .subtest-next': 'next',
    'click .subtest-back': 'back',
    'click .subtest_help': 'toggleHelp',
    'click .skip': 'skip'
  },
  i18n: function() {
    return this.text = {
      "next": t("SubtestRunView.button.next"),
      "back": t("SubtestRunView.button.back"),
      "skip": t("SubtestRunView.button.skip"),
      "help": t("SubtestRunView.button.help")
    };
  },
  initialize: function(options) {
    var backable, col, hasSequences, i, j, model, places, ref, resultView, sequences, skippable, ui;
    this.i18n();
    Tangerine.progress = {};
    Tangerine.progress.index = 0;
    this.index = Tangerine.progress.index;
    this.abortAssessment = false;
    this.model = options.model;
    this.orderMap = [];
    this.enableCorrections = false;
    Tangerine.tempData = {};
    this.rendered = {
      "assessment": false,
      "subtest": false
    };
    Tangerine.activity = "assessment run";
    this.subtestViews = [];
    this.model.parent = this;
    this.model.subtests.sort();
    this.model.subtests.each((function(_this) {
      return function(model) {
        model.parent = _this;
        return _this.subtestViews.push(new SubtestRunView({
          model: model,
          parent: _this
        }));
      };
    })(this));
    hasSequences = this.model.has("sequences") && !_.isEmpty(_.compact(_.flatten(this.model.get("sequences"))));
    if (hasSequences) {
      sequences = this.model.get("sequences");
      places = Tangerine.settings.get("sequencePlaces");
      if (places == null) {
        places = {};
      }
      if (places[this.model.id] == null) {
        places[this.model.id] = 0;
      }
      if (places[this.model.id] < sequences.length - 1) {
        places[this.model.id]++;
      } else {
        places[this.model.id] = 0;
      }
      Tangerine.settings.save("sequencePlaces", places);
      this.orderMap = sequences[places[this.model.id]];
      this.orderMap[this.orderMap.length] = this.subtestViews.length;
    } else {
      for (i = j = 0, ref = this.subtestViews.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        this.orderMap[i] = i;
      }
    }
    this.result = new Result({
      assessmentId: this.model.id,
      assessmentName: this.model.get("name"),
      blank: true
    });
    if (hasSequences) {
      this.result.set({
        "order_map": this.orderMap
      });
    }
    resultView = new ResultView({
      model: this.result,
      assessment: this.model,
      assessmentView: this
    });
    this.subtestViews.push(resultView);
    col = {};
    col.models = [];
    model = this.subtestViews[this.orderMap[this.index]].model;
    col.models.push(model);
    this.collection = col;
    ui = {};
    ui.enumeratorHelp = (this.model.get("enumeratorHelp") || "") !== "" ? "<button class='subtest_help command'>" + this.text.help + "</button><div class='enumerator_help' " + (this.fontStyle || "") + ">" + (this.model.get('enumeratorHelp')) + "</div>" : "";
    ui.studentDialog = (this.model.get("studentDialog") || "") !== "" ? "<div class='student_dialog' " + (this.fontStyle || "") + ">" + (this.model.get('studentDialog')) + "</div>" : "";
    ui.transitionComment = (this.model.get("transitionComment") || "") !== "" ? "<div class='student_dialog' " + (this.fontStyle || "") + ">" + (this.model.get('transitionComment')) + "</div> <br>" : "";
    skippable = this.model.get("skippable") === true || this.model.get("skippable") === "true";
    backable = (this.model.get("backButton") === true || this.model.get("backButton") === "true") && this.parent.index !== 0;
    if (skippable) {
      ui.skipButton = "<button class='skip navigation'>" + this.text.skip + "</button>";
    }
    if (backable) {
      ui.backButton = "<button class='subtest-back navigation'>" + this.text.back + "</button>";
    }
    ui.text = this.text;
    return this.model.set('ui', ui);
  },
  onRender: function() {
    this.$el.find('#progress').progressbar({
      value: (this.index + 1) / (this.model.subtests.length + 1) * 100
    });
    Tangerine.progress.currentSubview.on("rendered", (function(_this) {
      return function() {
        return _this.flagRender("subtest");
      };
    })(this));
    Tangerine.progress.currentSubview.on("subRendered", (function(_this) {
      return function() {
        return _this.trigger("subRendered");
      };
    })(this));
    Tangerine.progress.currentSubview.on("next", (function(_this) {
      return function() {
        console.log("currentView next");
        return _this.step(1);
      };
    })(this));
    Tangerine.progress.currentSubview.on("back", (function(_this) {
      return function() {
        return _this.step(-1);
      };
    })(this));
    return this.flagRender("assessment");
  },
  flagRender: function(object) {
    this.rendered[object] = true;
    if (this.rendered.assessment && this.rendered.subtest) {
      return this.trigger("rendered");
    }
  },
  afterRender: function() {
    var ref;
    return (ref = this.subtestViews[this.orderMap[this.index]]) != null ? typeof ref.afterRender === "function" ? ref.afterRender() : void 0 : void 0;
  },
  onClose: function() {
    var j, len, ref, view;
    ref = this.subtestViews;
    for (j = 0, len = ref.length; j < len; j++) {
      view = ref[j];
      view.close();
    }
    this.result.clear();
    return Tangerine.nav.setStudent("");
  },
  abort: function() {
    this.abortAssessment = true;
    return this.step(1);
  },
  skip: (function(_this) {
    return function() {
      var currentView;
      currentView = Tangerine.progress.currentSubview;
      return _this.result.add({
        name: currentView.model.get("name"),
        data: currentView.getSkipped(),
        subtestId: currentView.model.id,
        skipped: true,
        prototype: currentView.model.get("prototype")
      }, {
        success: function() {
          return _this.reset(1);
        }
      });
    };
  })(this),
  step: function(increment) {
    var currentView, valid;
    if (this.abortAssessment) {
      currentView = Tangerine.progress.currentSubview;
      this.saveResult(currentView);
      return;
    }
    currentView = Tangerine.progress.currentSubview;
    if (currentView.testValid != null) {
      valid = currentView.testValid();
      if (valid) {
        return this.saveResult(currentView, increment);
      } else {
        return currentView.showErrors();
      }
    } else {
      return currentView.showErrors();
    }
  },
  next: function() {
    return this.step(1);
  },
  back: function() {
    return this.step(-1);
  },
  toggleHelp: function() {
    return this.$el.find(".enumerator_help").fadeToggle(250);
  },
  getGridScore: function() {
    var grid, gridScore, link;
    link = this.model.get("gridLinkId") || "";
    if (link === "") {
      return;
    }
    grid = this.parent.model.subtests.get(this.model.get("gridLinkId"));
    gridScore = this.parent.result.getGridScore(grid.id);
    return gridScore;
  },
  gridWasAutostopped: function() {
    var grid, gridWasAutostopped, link;
    link = this.model.get("gridLinkId") || "";
    if (link === "") {
      return;
    }
    grid = this.parent.model.subtests.get(this.model.get("gridLinkId"));
    return gridWasAutostopped = this.parent.result.gridWasAutostopped(grid.id);
  },
  reset: function(increment) {
    var model;
    this.rendered.subtest = false;
    this.rendered.assessment = false;
    Tangerine.progress.currentSubview.close();
    this.index = this.abortAssessment === true ? this.subtestViews.length - 1 : this.index + increment;
    model = this.subtestViews[this.orderMap[this.index]].model;
    this.collection.models = [model];
    this.render();
    return window.scrollTo(0, 0);
  },
  saveResult: function(currentView, increment) {
    var getSum, i, j, len, prototype, ref, result, subtestId, subtestReplace, subtestResult;
    subtestResult = currentView.getResult();
    subtestId = currentView.model.id;
    prototype = currentView.model.get("prototype");
    subtestReplace = null;
    ref = this.result.get('subtestData');
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      result = ref[i];
      if (subtestId === result.subtestId) {
        subtestReplace = i;
      }
    }
    if (subtestReplace !== null) {
      if (typeof currentView.getSum !== 'function') {
        getSum = {
          correct: 0,
          incorrect: 0,
          missing: 0,
          total: 0
        };
      }
      if (prototype !== 'gps') {
        this.result.insert({
          name: currentView.model.get("name"),
          data: subtestResult.body,
          subtestHash: subtestResult.meta.hash,
          subtestId: currentView.model.id,
          prototype: currentView.model.get("prototype"),
          sum: getSum
        });
      }
      return this.reset(increment);
    } else {
      return this.result.add({
        name: currentView.model.get("name"),
        data: subtestResult.body,
        subtestHash: subtestResult.meta.hash,
        subtestId: currentView.model.id,
        prototype: currentView.model.get("prototype"),
        sum: getSum
      }, {
        success: (function(_this) {
          return function() {
            return _this.reset(increment);
          };
        })(this)
      });
    }
  },
  getSum: function() {
    if (Tangerine.progress.currentSubview.getSum != null) {
      return Tangerine.progress.currentSubview.getSum();
    } else {
      return {
        correct: 0,
        incorrect: 0,
        missing: 0,
        total: 0
      };
    }
  }
});

//# sourceMappingURL=data:application/json;base64,
