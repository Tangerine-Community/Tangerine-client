var KlassGroupingView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

KlassGroupingView = (function(superClass) {
  extend(KlassGroupingView, superClass);

  function KlassGroupingView() {
    return KlassGroupingView.__super__.constructor.apply(this, arguments);
  }

  KlassGroupingView.prototype.className = "KlassGroupingView";

  KlassGroupingView.prototype.normalCurve = [0.00000, 0.00399, 0.00798, 0.01197, 0.01595, 0.01994, 0.02392, 0.02790, 0.03188, 0.03586, 0.03983, 0.04380, 0.04776, 0.05172, 0.05567, 0.05962, 0.06356, 0.06749, 0.07142, 0.07535, 0.07926, 0.08317, 0.08706, 0.09095, 0.09483, 0.09871, 0.10257, 0.10642, 0.11026, 0.11409, 0.11791, 0.12172, 0.12552, 0.12930, 0.13307, 0.13683, 0.14058, 0.14431, 0.14803, 0.15173, 0.15542, 0.15910, 0.16276, 0.16640, 0.17003, 0.17364, 0.17724, 0.18082, 0.18439, 0.18793, 0.19146, 0.19497, 0.19847, 0.20194, 0.20540, 0.20884, 0.21226, 0.21566, 0.21904, 0.22240, 0.22575, 0.22907, 0.23237, 0.23565, 0.23891, 0.24215, 0.24537, 0.24857, 0.25175, 0.25490, 0.25804, 0.26115, 0.26424, 0.26730, 0.27035, 0.27337, 0.27637, 0.27935, 0.28230, 0.28524, 0.28814, 0.29103, 0.29389, 0.29673, 0.29955, 0.30234, 0.30511, 0.30785, 0.31057, 0.31327, 0.31594, 0.31859, 0.32121, 0.32381, 0.32639, 0.32894, 0.33147, 0.33398, 0.33646, 0.33891, 0.34134, 0.34375, 0.34614, 0.34849, 0.35083, 0.35314, 0.35543, 0.35769, 0.35993, 0.36214, 0.36433, 0.36650, 0.36864, 0.37076, 0.37286, 0.37493, 0.37698, 0.37900, 0.38100, 0.38298, 0.38493, 0.38686, 0.38877, 0.39065, 0.39251, 0.39435, 0.39617, 0.39796, 0.39973, 0.40147, 0.40320, 0.40490, 0.40658, 0.40824, 0.40988, 0.41149, 0.41308, 0.41466, 0.41621, 0.41774, 0.41924, 0.42073, 0.42220, 0.42364, 0.42507, 0.42647, 0.42785, 0.42922, 0.43056, 0.43189, 0.43319, 0.43448, 0.43574, 0.43699, 0.43822, 0.43943, 0.44062, 0.44179, 0.44295, 0.44408, 0.44520, 0.44630, 0.44738, 0.44845, 0.44950, 0.45053, 0.45154, 0.45254, 0.45352, 0.45449, 0.45543, 0.45637, 0.45728, 0.45818, 0.45907, 0.45994, 0.46080, 0.46164, 0.46246, 0.46327, 0.46407, 0.46485, 0.46562, 0.46638, 0.46712, 0.46784, 0.46856, 0.46926, 0.46995, 0.47062, 0.47128, 0.47193, 0.47257, 0.47320, 0.47381, 0.47441, 0.47500, 0.47558, 0.47615, 0.47670, 0.47725, 0.47778, 0.47831, 0.47882, 0.47932, 0.47982, 0.48030, 0.48077, 0.48124, 0.48169, 0.48214, 0.48257, 0.48300, 0.48341, 0.48382, 0.48422, 0.48461, 0.48500, 0.48537, 0.48574, 0.48610, 0.48645, 0.48679, 0.48713, 0.48745, 0.48778, 0.48809, 0.48840, 0.48870, 0.48899, 0.48928, 0.48956, 0.48983, 0.49010, 0.49036, 0.49061, 0.49086, 0.49111, 0.49134, 0.49158, 0.49180, 0.49202, 0.49224, 0.49245, 0.49266, 0.49286, 0.49305, 0.49324, 0.49343, 0.49361, 0.49379, 0.49396, 0.49413, 0.49430, 0.49446, 0.49461, 0.49477, 0.49492, 0.49506, 0.49520, 0.49534, 0.49547, 0.49560, 0.49573, 0.49585, 0.49598, 0.49609, 0.49621, 0.49632, 0.49643, 0.49653, 0.49664, 0.49674, 0.49683, 0.49693, 0.49702, 0.49711, 0.49720, 0.49728, 0.49736, 0.49744, 0.49752, 0.49760, 0.49767, 0.49774, 0.49781, 0.49788, 0.49795, 0.49801, 0.49807, 0.49813, 0.49819, 0.49825, 0.49831, 0.49836, 0.49841, 0.49846, 0.49851, 0.49856, 0.49861, 0.49865, 0.49869, 0.49874, 0.49878, 0.49882, 0.49886, 0.49889, 0.49893, 0.49896, 0.49900, 0.49903, 0.49906, 0.49910, 0.49913, 0.49916, 0.49918, 0.49921, 0.49924, 0.49926, 0.49929, 0.49931, 0.49934, 0.49936, 0.49938, 0.49940, 0.49942, 0.49944, 0.49946, 0.49948, 0.49950, 0.49952, 0.49953, 0.49955, 0.49957, 0.49958, 0.49960, 0.49961, 0.49962, 0.49964, 0.49965, 0.49966, 0.49968, 0.49969, 0.49970, 0.49971, 0.49972, 0.49973, 0.49974, 0.49975, 0.49976, 0.49977, 0.49978, 0.49978, 0.49979, 0.49980, 0.49981, 0.49981, 0.49982, 0.49983, 0.49983, 0.49984, 0.49985, 0.49985, 0.49986, 0.49986, 0.49987, 0.49987, 0.49988, 0.49988, 0.49989, 0.49989, 0.49990, 0.49990, 0.49990, 0.49991, 0.49991, 0.49992, 0.49992, 0.49992, 0.49992, 0.49993, 0.49993, 0.49993, 0.49994, 0.49994, 0.49994, 0.49994, 0.49995, 0.49995, 0.49995, 0.49995, 0.49995, 0.49996, 0.49996, 0.49996, 0.49996, 0.49996, 0.49996, 0.49997, 0.49997, 0.49997, 0.49997, 0.49997, 0.49997, 0.49997, 0.49997, 0.49998, 0.49998, 0.49998, 0.49998];

  KlassGroupingView.prototype.colorClass = ["concerning", "poor", "good", "great"];

  KlassGroupingView.prototype.status = ["Concerning", "Poor", "Good", "Great"];

  KlassGroupingView.prototype.events = {
    "click .back": "goBack",
    "change #selector_container input": "selector",
    'click .student_name': 'showItemized'
  };

  KlassGroupingView.prototype.showItemized = function(event) {
    var $studentResults, $target, studentId;
    $target = $(event.target);
    studentId = $(event.target).attr("data-studentId");
    $studentResults = this.$el.find(".student_" + studentId);
    if ($studentResults.is(":visible")) {
      $studentResults.addClass("confirmation");
      return $target.css({
        "color": "black"
      });
    } else {
      this.$el.find(".student_name").css({
        "color": "black"
      });
      $target.css({
        "color": "white"
      });
      this.$el.find(".itemized_results").addClass("confirmation");
      return this.$el.find(".student_" + studentId).removeClass("confirmation");
    }
  };

  KlassGroupingView.prototype.selector = function() {
    var subtestId;
    subtestId = this.$el.find("#selector_container input:checked").attr("data-subtestId");
    this.selected.subtestId = subtestId;
    this.selected.results = this.results.where({
      "subtestId": subtestId
    });
    this.updateTable();
    return this.render();
  };

  KlassGroupingView.prototype.goBack = function() {
    return history.back();
  };

  KlassGroupingView.prototype.initialize = function(options) {
    var i, j, len, ref, subtest;
    this.results = options.results;
    this.subtests = options.subtests;
    this.students = options.students;
    this.selected = {};
    ref = this.subtests.models;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      subtest = ref[i];
      this.selected.subtestId = this.subtests.models[i].id;
      if ((this.selected.results = this.results.where({
        "subtestId": subtest.id
      })).length !== 0) {
        break;
      }
    }
    return this.updateTable();
  };

  KlassGroupingView.prototype.updateTable = function() {
    var aCorrect, classNotReady, classReady, dev, devIndex, i, index, isClassReady, j, k, l, len, len1, len2, len3, m, nStudentsNotReady, pNotReady, pc, percentile, person, ref, ref1, ref2, ref3, ref4, result, warningIcon;
    this.table = [];
    aCorrect = 0;
    this.subtest = this.subtests.get(this.selected.subtestId);
    this.summary = {
      "name": this.subtest.get("name"),
      "classSize": this.students.length,
      "resultCount": this.selected.results.length,
      "aCorrect": 0,
      "anCorrect": 0,
      "stdDev": 0,
      "attempted": 0,
      "totalItems": (ref = this.selected.results[0]) != null ? ref.get("total") : void 0,
      "watchList": []
    };
    ref1 = this.selected.results;
    for (j = 0, len = ref1.length; j < len; j++) {
      result = ref1[j];
      person = {
        'studentId': result.get("studentId"),
        'items': result.getItemized(),
        'name': this.students.get(result.get("studentId")).get("name"),
        'pCorrect': 0,
        'nCorrect': result.get("correct"),
        'attempted': result.get("total") - result.get("missing"),
        'total': result.get("total"),
        'deviation': 0,
        'percentile': 0,
        'status': ""
      };
      person.pCorrect = Math.round(person.nCorrect / person.attempted * 100);
      this.summary.aCorrect += person.pCorrect;
      this.summary.anCorrect += person.nCorrect;
      this.summary.attempted += person.attempted;
      this.table.push(person);
    }
    this.summary.aCorrect = Math.decimals(this.summary.aCorrect / this.table.length, 0);
    this.summary.anCorrect = Math.decimals(this.summary.anCorrect / this.table.length, 2);
    this.summary.attempted = Math.decimals(this.summary.attempted / this.table.length, 2);
    ref2 = this.table;
    for (k = 0, len1 = ref2.length; k < len1; k++) {
      person = ref2[k];
      this.summary.stdDev += Math.pow(person.pCorrect - this.summary.aCorrect, 2);
    }
    this.summary.stdDev = Math.decimals(Math.pow(this.summary.stdDev / this.table.length, 0.5), 2);
    ref3 = this.table;
    for (i = l = 0, len2 = ref3.length; l < len2; i = ++l) {
      person = ref3[i];
      dev = (person.pCorrect - this.summary.aCorrect) / this.summary.stdDev;
      devIndex = Math.round(dev * 100);
      percentile = devIndex > 409 || devIndex < -409 ? 0 : devIndex > 0 ? 100 * Math.round(50 + 100 * this.normalCurve[devIndex]) / 100 : devIndex < 0 ? 100 * Math.round(50 - 100 * this.normalCurve[devIndex * -1]) / 100 : 50;
      pc = person.pCorrect;
      index = pc >= 80 ? index = 3 : pc >= 60 && pc <= 79 ? index = 2 : pc >= 30 && pc <= 59 ? index = 1 : index = 0;

      /* semi-old way
      Math.floor(person.pCorrect / 100 * 4)
      index = 3 if index == 4
       */
      this.table[i].deviation = devIndex / 100;
      this.table[i].percentile = percentile;
      this.table[i].index = index;
      this.table[i].status = this.status[index];
      if (index === 0 && !~this.summary.watchList.indexOf(person.name)) {
        this.summary.watchList.push(person.name);
      }
    }
    this.table.sort(function(a, b) {
      return b.pCorrect - a.pCorrect;
    });
    nStudentsNotReady = 0;
    ref4 = this.table;
    for (m = 0, len3 = ref4.length; m < len3; m++) {
      person = ref4[m];
      if (person.pCorrect < 75) {
        nStudentsNotReady++;
      }
    }
    pNotReady = (nStudentsNotReady / this.table.length) * 100;
    isClassReady = pNotReady < 20;
    warningIcon = "<img src='images/icon_warn.png'>";
    this.readyPercentage = "<p>" + (Math.round(pNotReady)) + "% of your students are not ready to move on to the next lessons.</p>";
    classReady = "It is ok to move on in the lesson sequence. Make sure that those children performing in the “poor” or “concerning” category get extra attention and practice and don’t fall behind. This can be done during practice lessons on Tuesday and Thursdays, or during another subject on the timetable.";
    classNotReady = "Your class needs extra practice. Consider re-teaching Monday and Wednesday lessons introducing the new curriculum items or organize intense practice activities for the entire class. To find out which items students are particularly struggling with, select the name of a few students in the “poor” or “concerning” category and review their performance item by item. Take note of items that seem particularly troublesome.";
    return this.readinessWarning = isClassReady ? classReady : classNotReady;
  };

  KlassGroupingView.prototype.render = function() {
    var checkedAttribute, datum, detailsHTML, emptyHTML, html, i, itemizedResults, j, k, l, len, len1, len2, menuHTML, person, ref, ref1, ref2, subtest, summaryHTML, warningsHTML;
    if (!~this.subtests.pluck("reportType").indexOf("progress")) {
      warningsHTML = "<section> " + this.readyPercentage + " " + this.readinessWarning + " </section>";
      warningsHTML += '<section> <p>Refer to the file “Kiswahili Wordlists” on your tablet for a list of additional words that may be useful for such group-based activities or practice for students performing in the “poor” or “concerning” category.</p> <p>For the students to watch – consider also communicating with parents for extra practice at home.</p> <p>Identify items these students need further practice on by selecting their name in the grouping report to see their performance on each item.</p> <p>Give parents some help: Write out on a piece of paper the letters for them to practice with their child; or copy applicable words from the “Kiswahili Wordlists” that contain the letters for the child to practice.</p> </section>';
    }
    emptyHTML = "<h1>" + (t('student grouping report')) + "</h1> <p>No students tested for " + (this.subtests.get(this.selected.subtestId).get("name")) + " on assessment #" + (this.subtests.models[0].get("part")) + " yet. Return to the <a href='#class'>class menu</a> and click the <img src='images/icon_run.png'> icon to collect data.</p>";
    menuHTML = "<div id='selector_container' class='buttonset'>";
    ref = this.subtests.models;
    for (j = 0, len = ref.length; j < len; j++) {
      subtest = ref[j];
      checkedAttribute = subtest.id === this.selected.subtestId ? "checked='checked'" : "";
      menuHTML += "<label for='" + subtest.id + "'>" + (subtest.get("name")) + "</label> <input type='radio' class='selector' name='selector' id='" + subtest.id + "' data-subtestId='" + subtest.id + "' " + checkedAttribute + ">";
    }
    menuHTML += "</div>";
    summaryHTML = "<h1>Summary</h1> <table class='summary'> <tr><th>Subtest Name</th>          <td>" + this.summary.name + "</td></tr> <tr><th>Class Size</th>            <td>" + this.summary.classSize + "</td></tr> <tr><th>Students Assessed</th>     <td>" + this.summary.resultCount + "</td></tr> <tr><th>Average Correct (%)</th>   <td>" + this.summary.aCorrect + "%</td></tr> <tr><th>Average Correct</th>       <td>" + this.summary.anCorrect + " / " + this.summary.attempted + "</td></tr> <tr><th>Students to watch</th>     <td>" + (this.summary.watchList.join(', ')) + "</td></tr> </table>";
    detailsHTML = "<h1>Student grouping</h1> <table class='details'> <tr> <th>Name</th> <th>% correct</th> <th>Status</th> </tr>";
    itemizedResults = "";
    ref1 = this.table;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      person = ref1[k];
      detailsHTML += "<tr class='" + this.colorClass[person.index] + "'> <td class='student_name icon' data-studentId='" + person.studentId + "'>" + person.name + "</td> <td>" + person.pCorrect + "</td> <td>" + person.status + "</td> </tr>";
      itemizedResults += "<table class='itemized_results confirmation student_" + person.studentId + "'> <tbody><tr><th>Item</th><th>Result</th></tr>";
      ref2 = person.items;
      for (i = l = 0, len2 = ref2.length; l < len2; i = ++l) {
        datum = ref2[i];
        itemizedResults += "<tr><td>" + datum.itemLabel + "</td><td>" + (t(datum.itemResult)) + "</td></tr>";
      }
      itemizedResults += "</tbody></table>";
    }
    detailsHTML += "</table>";
    if (this.selected.results.length !== 0) {
      html = menuHTML + " " + summaryHTML + " " + detailsHTML + " " + itemizedResults + " " + (warningsHTML || "") + " <button class='navigation back'>Back</button>";
    } else {
      html = menuHTML + " " + emptyHTML + " <button class='navigation back'>Back</button>";
    }
    this.$el.html(html);
    return this.trigger("rendered");
  };

  KlassGroupingView.prototype.getQuartile = function(percentile) {
    return Math.round((percentile / 100) * 3);
  };

  return KlassGroupingView;

})(Backbone.View);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvcmVwb3J0L0tsYXNzR3JvdXBpbmdWaWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLGlCQUFBO0VBQUE7OztBQUFNOzs7Ozs7OzhCQUVKLFNBQUEsR0FBWTs7OEJBSVosV0FBQSxHQUFjLENBQUMsT0FBRCxFQUFVLE9BQVYsRUFBbUIsT0FBbkIsRUFBNEIsT0FBNUIsRUFBcUMsT0FBckMsRUFBOEMsT0FBOUMsRUFBdUQsT0FBdkQsRUFBZ0UsT0FBaEUsRUFBeUUsT0FBekUsRUFBa0YsT0FBbEYsRUFBMEYsT0FBMUYsRUFBbUcsT0FBbkcsRUFBNEcsT0FBNUcsRUFBcUgsT0FBckgsRUFBOEgsT0FBOUgsRUFBdUksT0FBdkksRUFBZ0osT0FBaEosRUFBeUosT0FBekosRUFBa0ssT0FBbEssRUFBMkssT0FBM0ssRUFBbUwsT0FBbkwsRUFBNEwsT0FBNUwsRUFBcU0sT0FBck0sRUFBOE0sT0FBOU0sRUFBdU4sT0FBdk4sRUFBZ08sT0FBaE8sRUFBeU8sT0FBek8sRUFBa1AsT0FBbFAsRUFBMlAsT0FBM1AsRUFBb1EsT0FBcFEsRUFBNFEsT0FBNVEsRUFBcVIsT0FBclIsRUFBOFIsT0FBOVIsRUFBdVMsT0FBdlMsRUFBZ1QsT0FBaFQsRUFBeVQsT0FBelQsRUFBa1UsT0FBbFUsRUFBMlUsT0FBM1UsRUFBb1YsT0FBcFYsRUFBNlYsT0FBN1YsRUFBcVcsT0FBclcsRUFBOFcsT0FBOVcsRUFBdVgsT0FBdlgsRUFBZ1ksT0FBaFksRUFBeVksT0FBelksRUFBa1osT0FBbFosRUFBMlosT0FBM1osRUFBb2EsT0FBcGEsRUFBNmEsT0FBN2EsRUFBc2IsT0FBdGIsRUFBOGIsT0FBOWIsRUFBdWMsT0FBdmMsRUFBZ2QsT0FBaGQsRUFBeWQsT0FBemQsRUFBa2UsT0FBbGUsRUFBMmUsT0FBM2UsRUFBb2YsT0FBcGYsRUFBNmYsT0FBN2YsRUFBc2dCLE9BQXRnQixFQUErZ0IsT0FBL2dCLEVBQXVoQixPQUF2aEIsRUFBZ2lCLE9BQWhpQixFQUF5aUIsT0FBemlCLEVBQWtqQixPQUFsakIsRUFBMmpCLE9BQTNqQixFQUFva0IsT0FBcGtCLEVBQTZrQixPQUE3a0IsRUFBc2xCLE9BQXRsQixFQUErbEIsT0FBL2xCLEVBQXdtQixPQUF4bUIsRUFBZ25CLE9BQWhuQixFQUF5bkIsT0FBem5CLEVBQWtvQixPQUFsb0IsRUFBMm9CLE9BQTNvQixFQUFvcEIsT0FBcHBCLEVBQTZwQixPQUE3cEIsRUFBc3FCLE9BQXRxQixFQUErcUIsT0FBL3FCLEVBQXdyQixPQUF4ckIsRUFBaXNCLE9BQWpzQixFQUF5c0IsT0FBenNCLEVBQWt0QixPQUFsdEIsRUFBMnRCLE9BQTN0QixFQUFvdUIsT0FBcHVCLEVBQTZ1QixPQUE3dUIsRUFBc3ZCLE9BQXR2QixFQUErdkIsT0FBL3ZCLEVBQXd3QixPQUF4d0IsRUFBaXhCLE9BQWp4QixFQUEweEIsT0FBMXhCLEVBQWt5QixPQUFseUIsRUFBMnlCLE9BQTN5QixFQUFvekIsT0FBcHpCLEVBQTZ6QixPQUE3ekIsRUFBczBCLE9BQXQwQixFQUErMEIsT0FBLzBCLEVBQXcxQixPQUF4MUIsRUFBaTJCLE9BQWoyQixFQUEwMkIsT0FBMTJCLEVBQW0zQixPQUFuM0IsRUFBMjNCLE9BQTMzQixFQUFvNEIsT0FBcDRCLEVBQTY0QixPQUE3NEIsRUFBczVCLE9BQXQ1QixFQUErNUIsT0FBLzVCLEVBQXc2QixPQUF4NkIsRUFBaTdCLE9BQWo3QixFQUEwN0IsT0FBMTdCLEVBQW04QixPQUFuOEIsRUFBNDhCLE9BQTU4QixFQUFvOUIsT0FBcDlCLEVBQTY5QixPQUE3OUIsRUFBcytCLE9BQXQrQixFQUErK0IsT0FBLytCLEVBQXcvQixPQUF4L0IsRUFBaWdDLE9BQWpnQyxFQUEwZ0MsT0FBMWdDLEVBQW1oQyxPQUFuaEMsRUFBNGhDLE9BQTVoQyxFQUFxaUMsT0FBcmlDLEVBQTZpQyxPQUE3aUMsRUFBc2pDLE9BQXRqQyxFQUErakMsT0FBL2pDLEVBQXdrQyxPQUF4a0MsRUFBaWxDLE9BQWpsQyxFQUEwbEMsT0FBMWxDLEVBQW1tQyxPQUFubUMsRUFBNG1DLE9BQTVtQyxFQUFxbkMsT0FBcm5DLEVBQThuQyxPQUE5bkMsRUFBc29DLE9BQXRvQyxFQUErb0MsT0FBL29DLEVBQXdwQyxPQUF4cEMsRUFBaXFDLE9BQWpxQyxFQUEwcUMsT0FBMXFDLEVBQW1yQyxPQUFuckMsRUFBNHJDLE9BQTVyQyxFQUFxc0MsT0FBcnNDLEVBQThzQyxPQUE5c0MsRUFBdXRDLE9BQXZ0QyxFQUErdEMsT0FBL3RDLEVBQXd1QyxPQUF4dUMsRUFBaXZDLE9BQWp2QyxFQUEwdkMsT0FBMXZDLEVBQW13QyxPQUFud0MsRUFBNHdDLE9BQTV3QyxFQUFxeEMsT0FBcnhDLEVBQTh4QyxPQUE5eEMsRUFBdXlDLE9BQXZ5QyxFQUFnekMsT0FBaHpDLEVBQXd6QyxPQUF4ekMsRUFBaTBDLE9BQWowQyxFQUEwMEMsT0FBMTBDLEVBQW0xQyxPQUFuMUMsRUFBNDFDLE9BQTUxQyxFQUFxMkMsT0FBcjJDLEVBQTgyQyxPQUE5MkMsRUFBdTNDLE9BQXYzQyxFQUFnNEMsT0FBaDRDLEVBQXk0QyxPQUF6NEMsRUFBaTVDLE9BQWo1QyxFQUEwNUMsT0FBMTVDLEVBQW02QyxPQUFuNkMsRUFBNDZDLE9BQTU2QyxFQUFxN0MsT0FBcjdDLEVBQTg3QyxPQUE5N0MsRUFBdThDLE9BQXY4QyxFQUFnOUMsT0FBaDlDLEVBQXk5QyxPQUF6OUMsRUFBaytDLE9BQWwrQyxFQUEwK0MsT0FBMStDLEVBQW0vQyxPQUFuL0MsRUFBNC9DLE9BQTUvQyxFQUFxZ0QsT0FBcmdELEVBQThnRCxPQUE5Z0QsRUFBdWhELE9BQXZoRCxFQUFnaUQsT0FBaGlELEVBQXlpRCxPQUF6aUQsRUFBa2pELE9BQWxqRCxFQUEyakQsT0FBM2pELEVBQW1rRCxPQUFua0QsRUFBNGtELE9BQTVrRCxFQUFxbEQsT0FBcmxELEVBQThsRCxPQUE5bEQsRUFBdW1ELE9BQXZtRCxFQUFnbkQsT0FBaG5ELEVBQXluRCxPQUF6bkQsRUFBa29ELE9BQWxvRCxFQUEyb0QsT0FBM29ELEVBQW9wRCxPQUFwcEQsRUFBNHBELE9BQTVwRCxFQUFxcUQsT0FBcnFELEVBQThxRCxPQUE5cUQsRUFBdXJELE9BQXZyRCxFQUFnc0QsT0FBaHNELEVBQXlzRCxPQUF6c0QsRUFBa3RELE9BQWx0RCxFQUEydEQsT0FBM3RELEVBQW91RCxPQUFwdUQsRUFBNnVELE9BQTd1RCxFQUFxdkQsT0FBcnZELEVBQTh2RCxPQUE5dkQsRUFBdXdELE9BQXZ3RCxFQUFneEQsT0FBaHhELEVBQXl4RCxPQUF6eEQsRUFBa3lELE9BQWx5RCxFQUEyeUQsT0FBM3lELEVBQW96RCxPQUFwekQsRUFBNnpELE9BQTd6RCxFQUFzMEQsT0FBdDBELEVBQTgwRCxPQUE5MEQsRUFBdTFELE9BQXYxRCxFQUFnMkQsT0FBaDJELEVBQXkyRCxPQUF6MkQsRUFBazNELE9BQWwzRCxFQUEyM0QsT0FBMzNELEVBQW80RCxPQUFwNEQsRUFBNjRELE9BQTc0RCxFQUFzNUQsT0FBdDVELEVBQSs1RCxPQUEvNUQsRUFBdTZELE9BQXY2RCxFQUFnN0QsT0FBaDdELEVBQXk3RCxPQUF6N0QsRUFBazhELE9BQWw4RCxFQUEyOEQsT0FBMzhELEVBQW85RCxPQUFwOUQsRUFBNjlELE9BQTc5RCxFQUFzK0QsT0FBdCtELEVBQSsrRCxPQUEvK0QsRUFBdy9ELE9BQXgvRCxFQUFnZ0UsT0FBaGdFLEVBQXlnRSxPQUF6Z0UsRUFBa2hFLE9BQWxoRSxFQUEyaEUsT0FBM2hFLEVBQW9pRSxPQUFwaUUsRUFBNmlFLE9BQTdpRSxFQUFzakUsT0FBdGpFLEVBQStqRSxPQUEvakUsRUFBd2tFLE9BQXhrRSxFQUFpbEUsT0FBamxFLEVBQXlsRSxPQUF6bEUsRUFBa21FLE9BQWxtRSxFQUEybUUsT0FBM21FLEVBQW9uRSxPQUFwbkUsRUFBNm5FLE9BQTduRSxFQUFzb0UsT0FBdG9FLEVBQStvRSxPQUEvb0UsRUFBd3BFLE9BQXhwRSxFQUFpcUUsT0FBanFFLEVBQTBxRSxPQUExcUUsRUFBa3JFLE9BQWxyRSxFQUEyckUsT0FBM3JFLEVBQW9zRSxPQUFwc0UsRUFBNnNFLE9BQTdzRSxFQUFzdEUsT0FBdHRFLEVBQSt0RSxPQUEvdEUsRUFBd3VFLE9BQXh1RSxFQUFpdkUsT0FBanZFLEVBQTB2RSxPQUExdkUsRUFBbXdFLE9BQW53RSxFQUEyd0UsT0FBM3dFLEVBQW94RSxPQUFweEUsRUFBNnhFLE9BQTd4RSxFQUFzeUUsT0FBdHlFLEVBQSt5RSxPQUEveUUsRUFBd3pFLE9BQXh6RSxFQUFpMEUsT0FBajBFLEVBQTAwRSxPQUExMEUsRUFBbTFFLE9BQW4xRSxFQUE0MUUsT0FBNTFFLEVBQW8yRSxPQUFwMkUsRUFBNjJFLE9BQTcyRSxFQUFzM0UsT0FBdDNFLEVBQSszRSxPQUEvM0UsRUFBdzRFLE9BQXg0RSxFQUFpNUUsT0FBajVFLEVBQTA1RSxPQUExNUUsRUFBbTZFLE9BQW42RSxFQUE0NkUsT0FBNTZFLEVBQXE3RSxPQUFyN0UsRUFBNjdFLE9BQTc3RSxFQUFzOEUsT0FBdDhFLEVBQSs4RSxPQUEvOEUsRUFBdzlFLE9BQXg5RSxFQUFpK0UsT0FBaitFLEVBQTArRSxPQUExK0UsRUFBbS9FLE9BQW4vRSxFQUE0L0UsT0FBNS9FLEVBQXFnRixPQUFyZ0YsRUFBOGdGLE9BQTlnRixFQUFzaEYsT0FBdGhGLEVBQStoRixPQUEvaEYsRUFBd2lGLE9BQXhpRixFQUFpakYsT0FBampGLEVBQTBqRixPQUExakYsRUFBbWtGLE9BQW5rRixFQUE0a0YsT0FBNWtGLEVBQXFsRixPQUFybEYsRUFBOGxGLE9BQTlsRixFQUF1bUYsT0FBdm1GLEVBQSttRixPQUEvbUYsRUFBd25GLE9BQXhuRixFQUFpb0YsT0FBam9GLEVBQTBvRixPQUExb0YsRUFBbXBGLE9BQW5wRixFQUE0cEYsT0FBNXBGLEVBQXFxRixPQUFycUYsRUFBOHFGLE9BQTlxRixFQUF1ckYsT0FBdnJGLEVBQWdzRixPQUFoc0YsRUFBd3NGLE9BQXhzRixFQUFpdEYsT0FBanRGLEVBQTB0RixPQUExdEYsRUFBbXVGLE9BQW51RixFQUE0dUYsT0FBNXVGLEVBQXF2RixPQUFydkYsRUFBOHZGLE9BQTl2RixFQUF1d0YsT0FBdndGLEVBQWd4RixPQUFoeEYsRUFBeXhGLE9BQXp4RixFQUFpeUYsT0FBanlGLEVBQTB5RixPQUExeUYsRUFBbXpGLE9BQW56RixFQUE0ekYsT0FBNXpGLEVBQXEwRixPQUFyMEYsRUFBODBGLE9BQTkwRixFQUF1MUYsT0FBdjFGLEVBQWcyRixPQUFoMkYsRUFBeTJGLE9BQXoyRixFQUFrM0YsT0FBbDNGLEVBQTIzRixPQUEzM0YsRUFBbzRGLE9BQXA0RixFQUE2NEYsT0FBNzRGLEVBQXM1RixPQUF0NUYsRUFBKzVGLE9BQS81RixFQUF3NkYsT0FBeDZGLEVBQWk3RixPQUFqN0YsRUFBMDdGLE9BQTE3RixFQUFtOEYsT0FBbjhGLEVBQTQ4RixPQUE1OEYsRUFBbzlGLE9BQXA5RixFQUE2OUYsT0FBNzlGLEVBQXMrRixPQUF0K0YsRUFBKytGLE9BQS8rRixFQUF3L0YsT0FBeC9GLEVBQWlnRyxPQUFqZ0csRUFBMGdHLE9BQTFnRyxFQUFtaEcsT0FBbmhHLEVBQTRoRyxPQUE1aEcsRUFBcWlHLE9BQXJpRyxFQUE2aUcsT0FBN2lHLEVBQXNqRyxPQUF0akcsRUFBK2pHLE9BQS9qRyxFQUF3a0csT0FBeGtHLEVBQWlsRyxPQUFqbEcsRUFBMGxHLE9BQTFsRyxFQUFtbUcsT0FBbm1HLEVBQTRtRyxPQUE1bUcsRUFBcW5HLE9BQXJuRyxFQUE4bkcsT0FBOW5HLEVBQXNvRyxPQUF0b0csRUFBK29HLE9BQS9vRyxFQUF3cEcsT0FBeHBHLEVBQWlxRyxPQUFqcUcsRUFBMHFHLE9BQTFxRyxFQUFtckcsT0FBbnJHLEVBQTRyRyxPQUE1ckcsRUFBcXNHLE9BQXJzRyxFQUE4c0csT0FBOXNHLEVBQXV0RyxPQUF2dEcsRUFBK3RHLE9BQS90RyxFQUF3dUcsT0FBeHVHLEVBQWl2RyxPQUFqdkcsRUFBMHZHLE9BQTF2RyxFQUFtd0csT0FBbndHLEVBQTR3RyxPQUE1d0csRUFBcXhHLE9BQXJ4RyxFQUE4eEcsT0FBOXhHLEVBQXV5RyxPQUF2eUcsRUFBZ3pHLE9BQWh6RyxFQUF3ekcsT0FBeHpHLEVBQWkwRyxPQUFqMEcsRUFBMDBHLE9BQTEwRyxFQUFtMUcsT0FBbjFHLEVBQTQxRyxPQUE1MUcsRUFBcTJHLE9BQXIyRyxFQUE4MkcsT0FBOTJHLEVBQXUzRyxPQUF2M0csRUFBZzRHLE9BQWg0RyxFQUF5NEcsT0FBejRHLEVBQWk1RyxPQUFqNUcsRUFBMDVHLE9BQTE1RyxFQUFtNkcsT0FBbjZHLEVBQTQ2RyxPQUE1NkcsRUFBcTdHLE9BQXI3RyxFQUE4N0csT0FBOTdHLEVBQXU4RyxPQUF2OEcsRUFBZzlHLE9BQWg5RyxFQUF5OUcsT0FBejlHLEVBQWsrRyxPQUFsK0csRUFBMCtHLE9BQTErRyxFQUFtL0csT0FBbi9HLEVBQTQvRyxPQUE1L0csRUFBcWdILE9BQXJnSCxFQUE4Z0gsT0FBOWdILEVBQXVoSCxPQUF2aEgsRUFBZ2lILE9BQWhpSCxFQUF5aUgsT0FBemlILEVBQWtqSCxPQUFsakgsRUFBMmpILE9BQTNqSDs7OEJBQ2QsVUFBQSxHQUFjLENBQUMsWUFBRCxFQUFlLE1BQWYsRUFBdUIsTUFBdkIsRUFBK0IsT0FBL0I7OzhCQUNkLE1BQUEsR0FBYyxDQUFDLFlBQUQsRUFBZSxNQUFmLEVBQXVCLE1BQXZCLEVBQStCLE9BQS9COzs4QkFFZCxNQUFBLEdBQ0U7SUFBQSxhQUFBLEVBQXFDLFFBQXJDO0lBQ0Esa0NBQUEsRUFBcUMsVUFEckM7SUFFQSxxQkFBQSxFQUF3QixjQUZ4Qjs7OzhCQUlGLFlBQUEsR0FBYyxTQUFDLEtBQUQ7QUFDWixRQUFBO0lBQUEsT0FBQSxHQUFVLENBQUEsQ0FBRSxLQUFLLENBQUMsTUFBUjtJQUNWLFNBQUEsR0FBWSxDQUFBLENBQUUsS0FBSyxDQUFDLE1BQVIsQ0FBZSxDQUFDLElBQWhCLENBQXFCLGdCQUFyQjtJQUNaLGVBQUEsR0FBa0IsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsV0FBQSxHQUFZLFNBQXRCO0lBRWxCLElBQUcsZUFBZSxDQUFDLEVBQWhCLENBQW1CLFVBQW5CLENBQUg7TUFDRSxlQUFlLENBQUMsUUFBaEIsQ0FBeUIsY0FBekI7YUFDQSxPQUFPLENBQUMsR0FBUixDQUFZO1FBQUEsT0FBQSxFQUFVLE9BQVY7T0FBWixFQUZGO0tBQUEsTUFBQTtNQUlFLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBTCxDQUFVLGVBQVYsQ0FBMEIsQ0FBQyxHQUEzQixDQUErQjtRQUFBLE9BQUEsRUFBVSxPQUFWO09BQS9CO01BQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBWTtRQUFBLE9BQUEsRUFBVSxPQUFWO09BQVo7TUFDQSxJQUFDLENBQUEsR0FBRyxDQUFDLElBQUwsQ0FBVSxtQkFBVixDQUE4QixDQUFDLFFBQS9CLENBQXdDLGNBQXhDO2FBQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsV0FBQSxHQUFZLFNBQXRCLENBQWtDLENBQUMsV0FBbkMsQ0FBK0MsY0FBL0MsRUFQRjs7RUFMWTs7OEJBY2QsUUFBQSxHQUFVLFNBQUE7QUFDUixRQUFBO0lBQUEsU0FBQSxHQUFZLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBTCxDQUFVLG1DQUFWLENBQThDLENBQUMsSUFBL0MsQ0FBb0QsZ0JBQXBEO0lBQ1osSUFBQyxDQUFBLFFBQVEsQ0FBQyxTQUFWLEdBQXNCO0lBQ3RCLElBQUMsQ0FBQSxRQUFRLENBQUMsT0FBVixHQUFzQixJQUFDLENBQUEsT0FBTyxDQUFDLEtBQVQsQ0FBZTtNQUFBLFdBQUEsRUFBYyxTQUFkO0tBQWY7SUFFdEIsSUFBQyxDQUFBLFdBQUQsQ0FBQTtXQUNBLElBQUMsQ0FBQSxNQUFELENBQUE7RUFOUTs7OEJBUVYsTUFBQSxHQUFRLFNBQUE7V0FBRyxPQUFPLENBQUMsSUFBUixDQUFBO0VBQUg7OzhCQUVSLFVBQUEsR0FBWSxTQUFFLE9BQUY7QUFFVixRQUFBO0lBQUEsSUFBQyxDQUFBLE9BQUQsR0FBVyxPQUFPLENBQUM7SUFDbkIsSUFBQyxDQUFBLFFBQUQsR0FBWSxPQUFPLENBQUM7SUFDcEIsSUFBQyxDQUFBLFFBQUQsR0FBWSxPQUFPLENBQUM7SUFFcEIsSUFBQyxDQUFBLFFBQUQsR0FBWTtBQUVaO0FBQUEsU0FBQSw2Q0FBQTs7TUFDRSxJQUFDLENBQUEsUUFBUSxDQUFDLFNBQVYsR0FBc0IsSUFBQyxDQUFBLFFBQVEsQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFFLENBQUM7TUFDMUMsSUFBUyxDQUFDLElBQUMsQ0FBQSxRQUFRLENBQUMsT0FBVixHQUFvQixJQUFDLENBQUEsT0FBTyxDQUFDLEtBQVQsQ0FBZTtRQUFBLFdBQUEsRUFBYyxPQUFPLENBQUMsRUFBdEI7T0FBZixDQUFyQixDQUE4RCxDQUFDLE1BQS9ELEtBQXlFLENBQWxGO0FBQUEsY0FBQTs7QUFGRjtXQUlBLElBQUMsQ0FBQSxXQUFELENBQUE7RUFaVTs7OEJBY1osV0FBQSxHQUFhLFNBQUE7QUFFWCxRQUFBO0lBQUEsSUFBQyxDQUFBLEtBQUQsR0FBVztJQUNYLFFBQUEsR0FBVztJQUVYLElBQUMsQ0FBQSxPQUFELEdBQVcsSUFBQyxDQUFBLFFBQVEsQ0FBQyxHQUFWLENBQWMsSUFBQyxDQUFBLFFBQVEsQ0FBQyxTQUF4QjtJQUNYLElBQUMsQ0FBQSxPQUFELEdBQ0U7TUFBQSxNQUFBLEVBQWdCLElBQUMsQ0FBQSxPQUFPLENBQUMsR0FBVCxDQUFhLE1BQWIsQ0FBaEI7TUFDQSxXQUFBLEVBQWdCLElBQUMsQ0FBQSxRQUFRLENBQUMsTUFEMUI7TUFFQSxhQUFBLEVBQWdCLElBQUMsQ0FBQSxRQUFRLENBQUMsT0FBTyxDQUFDLE1BRmxDO01BR0EsVUFBQSxFQUFnQixDQUhoQjtNQUlBLFdBQUEsRUFBZ0IsQ0FKaEI7TUFLQSxRQUFBLEVBQWdCLENBTGhCO01BTUEsV0FBQSxFQUFnQixDQU5oQjtNQU9BLFlBQUEsZ0RBQW9DLENBQUUsR0FBdEIsQ0FBMEIsT0FBMUIsVUFQaEI7TUFRQSxXQUFBLEVBQWdCLEVBUmhCOztBQVVGO0FBQUEsU0FBQSxzQ0FBQTs7TUFDRSxNQUFBLEdBQ0U7UUFBQSxXQUFBLEVBQWUsTUFBTSxDQUFDLEdBQVAsQ0FBVyxXQUFYLENBQWY7UUFDQSxPQUFBLEVBQWUsTUFBTSxDQUFDLFdBQVAsQ0FBQSxDQURmO1FBRUEsTUFBQSxFQUFlLElBQUMsQ0FBQSxRQUFRLENBQUMsR0FBVixDQUFlLE1BQU0sQ0FBQyxHQUFQLENBQVcsV0FBWCxDQUFmLENBQXdDLENBQUMsR0FBekMsQ0FBNkMsTUFBN0MsQ0FGZjtRQUdBLFVBQUEsRUFBZSxDQUhmO1FBSUEsVUFBQSxFQUFlLE1BQU0sQ0FBQyxHQUFQLENBQVcsU0FBWCxDQUpmO1FBS0EsV0FBQSxFQUFlLE1BQU0sQ0FBQyxHQUFQLENBQVcsT0FBWCxDQUFBLEdBQXNCLE1BQU0sQ0FBQyxHQUFQLENBQVcsU0FBWCxDQUxyQztRQU1BLE9BQUEsRUFBZSxNQUFNLENBQUMsR0FBUCxDQUFXLE9BQVgsQ0FOZjtRQU9BLFdBQUEsRUFBZSxDQVBmO1FBUUEsWUFBQSxFQUFlLENBUmY7UUFTQSxRQUFBLEVBQWUsRUFUZjs7TUFXRixNQUFNLENBQUMsUUFBUCxHQUFrQixJQUFJLENBQUMsS0FBTCxDQUFXLE1BQU0sQ0FBQyxRQUFQLEdBQWtCLE1BQU0sQ0FBQyxTQUF6QixHQUFxQyxHQUFoRDtNQUVsQixJQUFDLENBQUEsT0FBTyxDQUFDLFFBQVQsSUFBcUIsTUFBTSxDQUFDO01BQzVCLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBVCxJQUFzQixNQUFNLENBQUM7TUFDN0IsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFULElBQXNCLE1BQU0sQ0FBQztNQUU3QixJQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsQ0FBWSxNQUFaO0FBbkJGO0lBcUJBLElBQUMsQ0FBQSxPQUFPLENBQUMsUUFBVCxHQUFxQixJQUFJLENBQUMsUUFBTCxDQUFlLElBQUMsQ0FBQSxPQUFPLENBQUMsUUFBVCxHQUFvQixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQTFDLEVBQWtELENBQWxEO0lBQ3JCLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBVCxHQUFxQixJQUFJLENBQUMsUUFBTCxDQUFlLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBVCxHQUFxQixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQTNDLEVBQW1ELENBQW5EO0lBQ3JCLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBVCxHQUFxQixJQUFJLENBQUMsUUFBTCxDQUFlLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBVCxHQUFxQixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQTNDLEVBQW1ELENBQW5EO0FBRXJCO0FBQUEsU0FBQSx3Q0FBQTs7TUFDRSxJQUFDLENBQUEsT0FBTyxDQUFDLE1BQVQsSUFBbUIsSUFBSSxDQUFDLEdBQUwsQ0FBUyxNQUFNLENBQUMsUUFBUCxHQUFrQixJQUFDLENBQUEsT0FBTyxDQUFDLFFBQXBDLEVBQThDLENBQTlDO0FBRHJCO0lBR0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxNQUFULEdBQWtCLElBQUksQ0FBQyxRQUFMLENBQWMsSUFBSSxDQUFDLEdBQUwsQ0FBVSxJQUFDLENBQUEsT0FBTyxDQUFDLE1BQVQsR0FBa0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFuQyxFQUEyQyxHQUEzQyxDQUFkLEVBQStELENBQS9EO0FBRWxCO0FBQUEsU0FBQSxnREFBQTs7TUFFRSxHQUFBLEdBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUCxHQUFrQixJQUFDLENBQUEsT0FBTyxDQUFDLFFBQTVCLENBQUEsR0FBd0MsSUFBQyxDQUFBLE9BQU8sQ0FBQztNQUV2RCxRQUFBLEdBQVcsSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFBLEdBQU0sR0FBakI7TUFFWCxVQUFBLEdBQWdCLFFBQUEsR0FBVyxHQUFYLElBQWtCLFFBQUEsR0FBVyxDQUFDLEdBQWpDLEdBQ1QsQ0FEUyxHQUVILFFBQUEsR0FBVyxDQUFkLEdBQ0gsR0FBQSxHQUFNLElBQUksQ0FBQyxLQUFMLENBQVcsRUFBQSxHQUFLLEdBQUEsR0FBTSxJQUFDLENBQUEsV0FBWSxDQUFBLFFBQUEsQ0FBbkMsQ0FBTixHQUF1RCxHQURwRCxHQUVHLFFBQUEsR0FBVyxDQUFkLEdBQ0gsR0FBQSxHQUFNLElBQUksQ0FBQyxLQUFMLENBQVcsRUFBQSxHQUFLLEdBQUEsR0FBTSxJQUFDLENBQUEsV0FBWSxDQUFBLFFBQUEsR0FBVyxDQUFDLENBQVosQ0FBbkMsQ0FBTixHQUE0RCxHQUR6RCxHQUdIO01BRUosRUFBQSxHQUFLLE1BQU0sQ0FBQztNQUVaLEtBQUEsR0FDSyxFQUFBLElBQU0sRUFBVCxHQUNFLEtBQUEsR0FBUSxDQURWLEdBRVEsRUFBQSxJQUFNLEVBQU4sSUFBWSxFQUFBLElBQU0sRUFBckIsR0FDSCxLQUFBLEdBQVEsQ0FETCxHQUVHLEVBQUEsSUFBTSxFQUFOLElBQVksRUFBQSxJQUFNLEVBQXJCLEdBQ0gsS0FBQSxHQUFRLENBREwsR0FHSCxLQUFBLEdBQVE7O0FBTVo7Ozs7TUFLQSxJQUFDLENBQUEsS0FBTSxDQUFBLENBQUEsQ0FBRSxDQUFDLFNBQVYsR0FBdUIsUUFBQSxHQUFXO01BQ2xDLElBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFFLENBQUMsVUFBVixHQUF1QjtNQUN2QixJQUFDLENBQUEsS0FBTSxDQUFBLENBQUEsQ0FBRSxDQUFDLEtBQVYsR0FBdUI7TUFDdkIsSUFBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFWLEdBQXVCLElBQUMsQ0FBQSxNQUFPLENBQUEsS0FBQTtNQUUvQixJQUF1QyxLQUFBLEtBQVMsQ0FBVCxJQUFjLENBQUMsQ0FBQyxJQUFDLENBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFuQixDQUEyQixNQUFNLENBQUMsSUFBbEMsQ0FBdkQ7UUFBQSxJQUFDLENBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFuQixDQUF3QixNQUFNLENBQUMsSUFBL0IsRUFBQTs7QUF6Q0Y7SUE0Q0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQVksU0FBQyxDQUFELEVBQUksQ0FBSjthQUFVLENBQUMsQ0FBQyxRQUFGLEdBQWEsQ0FBQyxDQUFDO0lBQXpCLENBQVo7SUFJQSxpQkFBQSxHQUFvQjtBQUNwQjtBQUFBLFNBQUEsd0NBQUE7O01BQUMsSUFBdUIsTUFBTSxDQUFDLFFBQVAsR0FBa0IsRUFBekM7UUFBQSxpQkFBQSxHQUFBOztBQUFEO0lBQ0EsU0FBQSxHQUFZLENBQUMsaUJBQUEsR0FBa0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUExQixDQUFBLEdBQW9DO0lBQ2hELFlBQUEsR0FBZSxTQUFBLEdBQVk7SUFFM0IsV0FBQSxHQUFjO0lBQ2QsSUFBQyxDQUFBLGVBQUQsR0FBbUIsS0FBQSxHQUFLLENBQUMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxTQUFYLENBQUQsQ0FBTCxHQUE0QjtJQUUvQyxVQUFBLEdBQWE7SUFDYixhQUFBLEdBQWdCO1dBRWhCLElBQUMsQ0FBQSxnQkFBRCxHQUF1QixZQUFILEdBQXFCLFVBQXJCLEdBQXFDO0VBMUc5Qzs7OEJBNEdiLE1BQUEsR0FBUSxTQUFBO0FBTU4sUUFBQTtJQUFBLElBQUcsQ0FBQyxDQUFDLElBQUMsQ0FBQSxRQUFRLENBQUMsS0FBVixDQUFnQixZQUFoQixDQUE2QixDQUFDLE9BQTlCLENBQXNDLFVBQXRDLENBQUw7TUFHRSxZQUFBLEdBQWUsWUFBQSxHQUVYLElBQUMsQ0FBQSxlQUZVLEdBRU0sR0FGTixHQUdYLElBQUMsQ0FBQSxnQkFIVSxHQUdPO01BSXRCLFlBQUEsSUFBZ0IsMnNCQVZsQjs7SUF3QkEsU0FBQSxHQUFZLE1BQUEsR0FDTCxDQUFDLENBQUEsQ0FBRSx5QkFBRixDQUFELENBREssR0FDeUIsa0NBRHpCLEdBRWlCLENBQUMsSUFBQyxDQUFBLFFBQVEsQ0FBQyxHQUFWLENBQWMsSUFBQyxDQUFBLFFBQVEsQ0FBQyxTQUF4QixDQUFrQyxDQUFDLEdBQW5DLENBQXVDLE1BQXZDLENBQUQsQ0FGakIsR0FFaUUsa0JBRmpFLEdBRWtGLENBQUMsSUFBQyxDQUFBLFFBQVEsQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFFLENBQUMsR0FBcEIsQ0FBd0IsTUFBeEIsQ0FBRCxDQUZsRixHQUVtSDtJQU0vSCxRQUFBLEdBQVc7QUFDWDtBQUFBLFNBQUEscUNBQUE7O01BQ0UsZ0JBQUEsR0FBc0IsT0FBTyxDQUFDLEVBQVIsS0FBYyxJQUFDLENBQUEsUUFBUSxDQUFDLFNBQTNCLEdBQTBDLG1CQUExQyxHQUFtRTtNQUN0RixRQUFBLElBQVksY0FBQSxHQUNJLE9BQU8sQ0FBQyxFQURaLEdBQ2UsSUFEZixHQUNrQixDQUFDLE9BQU8sQ0FBQyxHQUFSLENBQVksTUFBWixDQUFELENBRGxCLEdBQ3VDLG9FQUR2QyxHQUVpRCxPQUFPLENBQUMsRUFGekQsR0FFNEQsb0JBRjVELEdBRWdGLE9BQU8sQ0FBQyxFQUZ4RixHQUUyRixJQUYzRixHQUUrRixnQkFGL0YsR0FFZ0g7QUFKOUg7SUFNQSxRQUFBLElBQVk7SUFLWixXQUFBLEdBQWMsa0ZBQUEsR0FFNkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxJQUZ0QyxHQUUyQyxvREFGM0MsR0FHNkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUh0QyxHQUdnRCxvREFIaEQsR0FJNkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxXQUp0QyxHQUlrRCxvREFKbEQsR0FLNkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxRQUx0QyxHQUsrQyxxREFML0MsR0FNNkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQU50QyxHQU1nRCxLQU5oRCxHQU1xRCxJQUFDLENBQUEsT0FBTyxDQUFDLFNBTjlELEdBTXdFLG9EQU54RSxHQU80QixDQUFDLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBUyxDQUFDLElBQW5CLENBQXdCLElBQXhCLENBQUQsQ0FQNUIsR0FPMkQ7SUFNekUsV0FBQSxHQUFjO0lBVWQsZUFBQSxHQUFrQjtBQUVsQjtBQUFBLFNBQUEsd0NBQUE7O01BQ0UsV0FBQSxJQUFlLGFBQUEsR0FDQSxJQUFDLENBQUEsVUFBVyxDQUFBLE1BQU0sQ0FBQyxLQUFQLENBRFosR0FDMEIsbURBRDFCLEdBRXFDLE1BQU0sQ0FBQyxTQUY1QyxHQUVzRCxJQUZ0RCxHQUUwRCxNQUFNLENBQUMsSUFGakUsR0FFc0UsWUFGdEUsR0FHTCxNQUFNLENBQUMsUUFIRixHQUdXLFlBSFgsR0FJTCxNQUFNLENBQUMsTUFKRixHQUlTO01BSXhCLGVBQUEsSUFBbUIsc0RBQUEsR0FDcUMsTUFBTSxDQUFDLFNBRDVDLEdBQ3NEO0FBSXpFO0FBQUEsV0FBQSxnREFBQTs7UUFDRSxlQUFBLElBQW1CLFVBQUEsR0FBVyxLQUFLLENBQUMsU0FBakIsR0FBMkIsV0FBM0IsR0FBcUMsQ0FBQyxDQUFBLENBQUUsS0FBSyxDQUFDLFVBQVIsQ0FBRCxDQUFyQyxHQUEwRDtBQUQvRTtNQUVBLGVBQUEsSUFBbUI7QUFoQnJCO0lBbUJBLFdBQUEsSUFBZTtJQUlmLElBQUcsSUFBQyxDQUFBLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBbEIsS0FBNEIsQ0FBL0I7TUFDRSxJQUFBLEdBQ0ksUUFBRCxHQUFVLEdBQVYsR0FDQyxXQURELEdBQ2EsR0FEYixHQUVDLFdBRkQsR0FFYSxHQUZiLEdBR0MsZUFIRCxHQUdpQixHQUhqQixHQUlBLENBQUMsWUFBQSxJQUFnQixFQUFqQixDQUpBLEdBSW9CLGlEQU56QjtLQUFBLE1BQUE7TUFVRSxJQUFBLEdBQ0ksUUFBRCxHQUFVLEdBQVYsR0FDQyxTQURELEdBQ1csaURBWmhCOztJQWdCQSxJQUFDLENBQUEsR0FBRyxDQUFDLElBQUwsQ0FBVSxJQUFWO1dBQ0EsSUFBQyxDQUFBLE9BQUQsQ0FBUyxVQUFUO0VBbkhNOzs4QkFzSFIsV0FBQSxHQUFhLFNBQUMsVUFBRDtXQUFnQixJQUFJLENBQUMsS0FBTCxDQUFZLENBQUMsVUFBQSxHQUFhLEdBQWQsQ0FBQSxHQUFxQixDQUFqQztFQUFoQjs7OztHQXZSaUIsUUFBUSxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvcmVwb3J0L0tsYXNzR3JvdXBpbmdWaWV3LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgS2xhc3NHcm91cGluZ1ZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJLbGFzc0dyb3VwaW5nVmlld1wiXG5cbiAgIyBVc2VkIHRvIGNhbGN1bGF0ZSBwZXJjZW50aWxlc1xuICAjIFVzZSBpbmRpY2VzIHdoZXJlIEluZGV4ID0gU3RhbmRhcmQgRGV2aWF0aW9uICogMTAwIGZvciBuZWdhdGl2ZSBkZXZpYXRpb25zXG4gIG5vcm1hbEN1cnZlIDogWzAuMDAwMDAsIDAuMDAzOTksIDAuMDA3OTgsIDAuMDExOTcsIDAuMDE1OTUsIDAuMDE5OTQsIDAuMDIzOTIsIDAuMDI3OTAsIDAuMDMxODgsIDAuMDM1ODYsMC4wMzk4MywgMC4wNDM4MCwgMC4wNDc3NiwgMC4wNTE3MiwgMC4wNTU2NywgMC4wNTk2MiwgMC4wNjM1NiwgMC4wNjc0OSwgMC4wNzE0MiwgMC4wNzUzNSwwLjA3OTI2LCAwLjA4MzE3LCAwLjA4NzA2LCAwLjA5MDk1LCAwLjA5NDgzLCAwLjA5ODcxLCAwLjEwMjU3LCAwLjEwNjQyLCAwLjExMDI2LCAwLjExNDA5LDAuMTE3OTEsIDAuMTIxNzIsIDAuMTI1NTIsIDAuMTI5MzAsIDAuMTMzMDcsIDAuMTM2ODMsIDAuMTQwNTgsIDAuMTQ0MzEsIDAuMTQ4MDMsIDAuMTUxNzMsMC4xNTU0MiwgMC4xNTkxMCwgMC4xNjI3NiwgMC4xNjY0MCwgMC4xNzAwMywgMC4xNzM2NCwgMC4xNzcyNCwgMC4xODA4MiwgMC4xODQzOSwgMC4xODc5MywwLjE5MTQ2LCAwLjE5NDk3LCAwLjE5ODQ3LCAwLjIwMTk0LCAwLjIwNTQwLCAwLjIwODg0LCAwLjIxMjI2LCAwLjIxNTY2LCAwLjIxOTA0LCAwLjIyMjQwLDAuMjI1NzUsIDAuMjI5MDcsIDAuMjMyMzcsIDAuMjM1NjUsIDAuMjM4OTEsIDAuMjQyMTUsIDAuMjQ1MzcsIDAuMjQ4NTcsIDAuMjUxNzUsIDAuMjU0OTAsMC4yNTgwNCwgMC4yNjExNSwgMC4yNjQyNCwgMC4yNjczMCwgMC4yNzAzNSwgMC4yNzMzNywgMC4yNzYzNywgMC4yNzkzNSwgMC4yODIzMCwgMC4yODUyNCwwLjI4ODE0LCAwLjI5MTAzLCAwLjI5Mzg5LCAwLjI5NjczLCAwLjI5OTU1LCAwLjMwMjM0LCAwLjMwNTExLCAwLjMwNzg1LCAwLjMxMDU3LCAwLjMxMzI3LDAuMzE1OTQsIDAuMzE4NTksIDAuMzIxMjEsIDAuMzIzODEsIDAuMzI2MzksIDAuMzI4OTQsIDAuMzMxNDcsIDAuMzMzOTgsIDAuMzM2NDYsIDAuMzM4OTEsMC4zNDEzNCwgMC4zNDM3NSwgMC4zNDYxNCwgMC4zNDg0OSwgMC4zNTA4MywgMC4zNTMxNCwgMC4zNTU0MywgMC4zNTc2OSwgMC4zNTk5MywgMC4zNjIxNCwwLjM2NDMzLCAwLjM2NjUwLCAwLjM2ODY0LCAwLjM3MDc2LCAwLjM3Mjg2LCAwLjM3NDkzLCAwLjM3Njk4LCAwLjM3OTAwLCAwLjM4MTAwLCAwLjM4Mjk4LDAuMzg0OTMsIDAuMzg2ODYsIDAuMzg4NzcsIDAuMzkwNjUsIDAuMzkyNTEsIDAuMzk0MzUsIDAuMzk2MTcsIDAuMzk3OTYsIDAuMzk5NzMsIDAuNDAxNDcsMC40MDMyMCwgMC40MDQ5MCwgMC40MDY1OCwgMC40MDgyNCwgMC40MDk4OCwgMC40MTE0OSwgMC40MTMwOCwgMC40MTQ2NiwgMC40MTYyMSwgMC40MTc3NCwwLjQxOTI0LCAwLjQyMDczLCAwLjQyMjIwLCAwLjQyMzY0LCAwLjQyNTA3LCAwLjQyNjQ3LCAwLjQyNzg1LCAwLjQyOTIyLCAwLjQzMDU2LCAwLjQzMTg5LDAuNDMzMTksIDAuNDM0NDgsIDAuNDM1NzQsIDAuNDM2OTksIDAuNDM4MjIsIDAuNDM5NDMsIDAuNDQwNjIsIDAuNDQxNzksIDAuNDQyOTUsIDAuNDQ0MDgsMC40NDUyMCwgMC40NDYzMCwgMC40NDczOCwgMC40NDg0NSwgMC40NDk1MCwgMC40NTA1MywgMC40NTE1NCwgMC40NTI1NCwgMC40NTM1MiwgMC40NTQ0OSwwLjQ1NTQzLCAwLjQ1NjM3LCAwLjQ1NzI4LCAwLjQ1ODE4LCAwLjQ1OTA3LCAwLjQ1OTk0LCAwLjQ2MDgwLCAwLjQ2MTY0LCAwLjQ2MjQ2LCAwLjQ2MzI3LDAuNDY0MDcsIDAuNDY0ODUsIDAuNDY1NjIsIDAuNDY2MzgsIDAuNDY3MTIsIDAuNDY3ODQsIDAuNDY4NTYsIDAuNDY5MjYsIDAuNDY5OTUsIDAuNDcwNjIsMC40NzEyOCwgMC40NzE5MywgMC40NzI1NywgMC40NzMyMCwgMC40NzM4MSwgMC40NzQ0MSwgMC40NzUwMCwgMC40NzU1OCwgMC40NzYxNSwgMC40NzY3MCwwLjQ3NzI1LCAwLjQ3Nzc4LCAwLjQ3ODMxLCAwLjQ3ODgyLCAwLjQ3OTMyLCAwLjQ3OTgyLCAwLjQ4MDMwLCAwLjQ4MDc3LCAwLjQ4MTI0LCAwLjQ4MTY5LDAuNDgyMTQsIDAuNDgyNTcsIDAuNDgzMDAsIDAuNDgzNDEsIDAuNDgzODIsIDAuNDg0MjIsIDAuNDg0NjEsIDAuNDg1MDAsIDAuNDg1MzcsIDAuNDg1NzQsMC40ODYxMCwgMC40ODY0NSwgMC40ODY3OSwgMC40ODcxMywgMC40ODc0NSwgMC40ODc3OCwgMC40ODgwOSwgMC40ODg0MCwgMC40ODg3MCwgMC40ODg5OSwwLjQ4OTI4LCAwLjQ4OTU2LCAwLjQ4OTgzLCAwLjQ5MDEwLCAwLjQ5MDM2LCAwLjQ5MDYxLCAwLjQ5MDg2LCAwLjQ5MTExLCAwLjQ5MTM0LCAwLjQ5MTU4LDAuNDkxODAsIDAuNDkyMDIsIDAuNDkyMjQsIDAuNDkyNDUsIDAuNDkyNjYsIDAuNDkyODYsIDAuNDkzMDUsIDAuNDkzMjQsIDAuNDkzNDMsIDAuNDkzNjEsMC40OTM3OSwgMC40OTM5NiwgMC40OTQxMywgMC40OTQzMCwgMC40OTQ0NiwgMC40OTQ2MSwgMC40OTQ3NywgMC40OTQ5MiwgMC40OTUwNiwgMC40OTUyMCwwLjQ5NTM0LCAwLjQ5NTQ3LCAwLjQ5NTYwLCAwLjQ5NTczLCAwLjQ5NTg1LCAwLjQ5NTk4LCAwLjQ5NjA5LCAwLjQ5NjIxLCAwLjQ5NjMyLCAwLjQ5NjQzLDAuNDk2NTMsIDAuNDk2NjQsIDAuNDk2NzQsIDAuNDk2ODMsIDAuNDk2OTMsIDAuNDk3MDIsIDAuNDk3MTEsIDAuNDk3MjAsIDAuNDk3MjgsIDAuNDk3MzYsMC40OTc0NCwgMC40OTc1MiwgMC40OTc2MCwgMC40OTc2NywgMC40OTc3NCwgMC40OTc4MSwgMC40OTc4OCwgMC40OTc5NSwgMC40OTgwMSwgMC40OTgwNywwLjQ5ODEzLCAwLjQ5ODE5LCAwLjQ5ODI1LCAwLjQ5ODMxLCAwLjQ5ODM2LCAwLjQ5ODQxLCAwLjQ5ODQ2LCAwLjQ5ODUxLCAwLjQ5ODU2LCAwLjQ5ODYxLDAuNDk4NjUsIDAuNDk4NjksIDAuNDk4NzQsIDAuNDk4NzgsIDAuNDk4ODIsIDAuNDk4ODYsIDAuNDk4ODksIDAuNDk4OTMsIDAuNDk4OTYsIDAuNDk5MDAsMC40OTkwMywgMC40OTkwNiwgMC40OTkxMCwgMC40OTkxMywgMC40OTkxNiwgMC40OTkxOCwgMC40OTkyMSwgMC40OTkyNCwgMC40OTkyNiwgMC40OTkyOSwwLjQ5OTMxLCAwLjQ5OTM0LCAwLjQ5OTM2LCAwLjQ5OTM4LCAwLjQ5OTQwLCAwLjQ5OTQyLCAwLjQ5OTQ0LCAwLjQ5OTQ2LCAwLjQ5OTQ4LCAwLjQ5OTUwLCAwLjQ5OTUyLCAwLjQ5OTUzLCAwLjQ5OTU1LCAwLjQ5OTU3LCAwLjQ5OTU4LCAwLjQ5OTYwLCAwLjQ5OTYxLCAwLjQ5OTYyLCAwLjQ5OTY0LCAwLjQ5OTY1LDAuNDk5NjYsIDAuNDk5NjgsIDAuNDk5NjksIDAuNDk5NzAsIDAuNDk5NzEsIDAuNDk5NzIsIDAuNDk5NzMsIDAuNDk5NzQsIDAuNDk5NzUsIDAuNDk5NzYsMC40OTk3NywgMC40OTk3OCwgMC40OTk3OCwgMC40OTk3OSwgMC40OTk4MCwgMC40OTk4MSwgMC40OTk4MSwgMC40OTk4MiwgMC40OTk4MywgMC40OTk4MywwLjQ5OTg0LCAwLjQ5OTg1LCAwLjQ5OTg1LCAwLjQ5OTg2LCAwLjQ5OTg2LCAwLjQ5OTg3LCAwLjQ5OTg3LCAwLjQ5OTg4LCAwLjQ5OTg4LCAwLjQ5OTg5LDAuNDk5ODksIDAuNDk5OTAsIDAuNDk5OTAsIDAuNDk5OTAsIDAuNDk5OTEsIDAuNDk5OTEsIDAuNDk5OTIsIDAuNDk5OTIsIDAuNDk5OTIsIDAuNDk5OTIsMC40OTk5MywgMC40OTk5MywgMC40OTk5MywgMC40OTk5NCwgMC40OTk5NCwgMC40OTk5NCwgMC40OTk5NCwgMC40OTk5NSwgMC40OTk5NSwgMC40OTk5NSwwLjQ5OTk1LCAwLjQ5OTk1LCAwLjQ5OTk2LCAwLjQ5OTk2LCAwLjQ5OTk2LCAwLjQ5OTk2LCAwLjQ5OTk2LCAwLjQ5OTk2LCAwLjQ5OTk3LCAwLjQ5OTk3LDAuNDk5OTcsIDAuNDk5OTcsIDAuNDk5OTcsIDAuNDk5OTcsIDAuNDk5OTcsIDAuNDk5OTcsIDAuNDk5OTgsIDAuNDk5OTgsIDAuNDk5OTgsIDAuNDk5OThdXG4gIGNvbG9yQ2xhc3MgIDogW1wiY29uY2VybmluZ1wiLCBcInBvb3JcIiwgXCJnb29kXCIsIFwiZ3JlYXRcIl1cbiAgc3RhdHVzICAgICAgOiBbXCJDb25jZXJuaW5nXCIsIFwiUG9vclwiLCBcIkdvb2RcIiwgXCJHcmVhdFwiXVxuXG4gIGV2ZW50czpcbiAgICBcImNsaWNrIC5iYWNrXCIgICAgICAgICAgICAgICAgICAgICAgOiBcImdvQmFja1wiXG4gICAgXCJjaGFuZ2UgI3NlbGVjdG9yX2NvbnRhaW5lciBpbnB1dFwiIDogXCJzZWxlY3RvclwiXG4gICAgJ2NsaWNrIC5zdHVkZW50X25hbWUnIDogJ3Nob3dJdGVtaXplZCcgXG5cbiAgc2hvd0l0ZW1pemVkOiAoZXZlbnQpIC0+XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgIHN0dWRlbnRJZCA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyIFwiZGF0YS1zdHVkZW50SWRcIlxuICAgICRzdHVkZW50UmVzdWx0cyA9IEAkZWwuZmluZCBcIi5zdHVkZW50XyN7c3R1ZGVudElkfVwiXG5cbiAgICBpZiAkc3R1ZGVudFJlc3VsdHMuaXMgXCI6dmlzaWJsZVwiXG4gICAgICAkc3R1ZGVudFJlc3VsdHMuYWRkQ2xhc3MgXCJjb25maXJtYXRpb25cIlxuICAgICAgJHRhcmdldC5jc3MgXCJjb2xvclwiIDogXCJibGFja1wiXG4gICAgZWxzZVxuICAgICAgQCRlbC5maW5kKFwiLnN0dWRlbnRfbmFtZVwiKS5jc3MgXCJjb2xvclwiIDogXCJibGFja1wiXG4gICAgICAkdGFyZ2V0LmNzcyBcImNvbG9yXCIgOiBcIndoaXRlXCJcbiAgICAgIEAkZWwuZmluZChcIi5pdGVtaXplZF9yZXN1bHRzXCIpLmFkZENsYXNzIFwiY29uZmlybWF0aW9uXCJcbiAgICAgIEAkZWwuZmluZChcIi5zdHVkZW50XyN7c3R1ZGVudElkfVwiKS5yZW1vdmVDbGFzcyBcImNvbmZpcm1hdGlvblwiXG5cbiAgc2VsZWN0b3I6IC0+XG4gICAgc3VidGVzdElkID0gQCRlbC5maW5kKFwiI3NlbGVjdG9yX2NvbnRhaW5lciBpbnB1dDpjaGVja2VkXCIpLmF0dHIoXCJkYXRhLXN1YnRlc3RJZFwiKVxuICAgIEBzZWxlY3RlZC5zdWJ0ZXN0SWQgPSBzdWJ0ZXN0SWRcbiAgICBAc2VsZWN0ZWQucmVzdWx0cyAgID0gQHJlc3VsdHMud2hlcmUoXCJzdWJ0ZXN0SWRcIiA6IHN1YnRlc3RJZClcblxuICAgIEB1cGRhdGVUYWJsZSgpXG4gICAgQHJlbmRlcigpXG5cbiAgZ29CYWNrOiAtPiBoaXN0b3J5LmJhY2soKVxuXG4gIGluaXRpYWxpemU6ICggb3B0aW9ucyApIC0+IFxuXG4gICAgQHJlc3VsdHMgPSBvcHRpb25zLnJlc3VsdHNcbiAgICBAc3VidGVzdHMgPSBvcHRpb25zLnN1YnRlc3RzXG4gICAgQHN0dWRlbnRzID0gb3B0aW9ucy5zdHVkZW50c1xuXG4gICAgQHNlbGVjdGVkID0ge31cbiAgICBcbiAgICBmb3Igc3VidGVzdCwgaSBpbiBAc3VidGVzdHMubW9kZWxzXG4gICAgICBAc2VsZWN0ZWQuc3VidGVzdElkID0gQHN1YnRlc3RzLm1vZGVsc1tpXS5pZFxuICAgICAgYnJlYWsgaWYgKEBzZWxlY3RlZC5yZXN1bHRzID0gQHJlc3VsdHMud2hlcmUoXCJzdWJ0ZXN0SWRcIiA6IHN1YnRlc3QuaWQpKS5sZW5ndGggIT0gMFxuXG4gICAgQHVwZGF0ZVRhYmxlKClcblxuICB1cGRhdGVUYWJsZTogLT5cblxuICAgIEB0YWJsZSAgID0gW11cbiAgICBhQ29ycmVjdCA9IDBcblxuICAgIEBzdWJ0ZXN0ID0gQHN1YnRlc3RzLmdldCBAc2VsZWN0ZWQuc3VidGVzdElkXG4gICAgQHN1bW1hcnkgPVxuICAgICAgXCJuYW1lXCIgICAgICAgIDogQHN1YnRlc3QuZ2V0KFwibmFtZVwiKVxuICAgICAgXCJjbGFzc1NpemVcIiAgIDogQHN0dWRlbnRzLmxlbmd0aFxuICAgICAgXCJyZXN1bHRDb3VudFwiIDogQHNlbGVjdGVkLnJlc3VsdHMubGVuZ3RoXG4gICAgICBcImFDb3JyZWN0XCIgICAgOiAwXG4gICAgICBcImFuQ29ycmVjdFwiICAgOiAwXG4gICAgICBcInN0ZERldlwiICAgICAgOiAwXG4gICAgICBcImF0dGVtcHRlZFwiICAgOiAwXG4gICAgICBcInRvdGFsSXRlbXNcIiAgOiBAc2VsZWN0ZWQucmVzdWx0c1swXT8uZ2V0KFwidG90YWxcIilcbiAgICAgIFwid2F0Y2hMaXN0XCIgICA6IFtdXG5cbiAgICBmb3IgcmVzdWx0IGluIEBzZWxlY3RlZC5yZXN1bHRzXG4gICAgICBwZXJzb24gPVxuICAgICAgICAnc3R1ZGVudElkJyAgOiByZXN1bHQuZ2V0KFwic3R1ZGVudElkXCIpXG4gICAgICAgICdpdGVtcycgICAgICA6IHJlc3VsdC5nZXRJdGVtaXplZCgpXG4gICAgICAgICduYW1lJyAgICAgICA6IEBzdHVkZW50cy5nZXQoIHJlc3VsdC5nZXQoXCJzdHVkZW50SWRcIikgKS5nZXQoXCJuYW1lXCIpXG4gICAgICAgICdwQ29ycmVjdCcgICA6IDBcbiAgICAgICAgJ25Db3JyZWN0JyAgIDogcmVzdWx0LmdldChcImNvcnJlY3RcIilcbiAgICAgICAgJ2F0dGVtcHRlZCcgIDogcmVzdWx0LmdldChcInRvdGFsXCIpIC0gcmVzdWx0LmdldChcIm1pc3NpbmdcIilcbiAgICAgICAgJ3RvdGFsJyAgICAgIDogcmVzdWx0LmdldChcInRvdGFsXCIpXG4gICAgICAgICdkZXZpYXRpb24nICA6IDBcbiAgICAgICAgJ3BlcmNlbnRpbGUnIDogMFxuICAgICAgICAnc3RhdHVzJyAgICAgOiBcIlwiXG5cbiAgICAgIHBlcnNvbi5wQ29ycmVjdCA9IE1hdGgucm91bmQocGVyc29uLm5Db3JyZWN0IC8gcGVyc29uLmF0dGVtcHRlZCAqIDEwMClcblxuICAgICAgQHN1bW1hcnkuYUNvcnJlY3QgKz0gcGVyc29uLnBDb3JyZWN0XG4gICAgICBAc3VtbWFyeS5hbkNvcnJlY3QgKz0gcGVyc29uLm5Db3JyZWN0XG4gICAgICBAc3VtbWFyeS5hdHRlbXB0ZWQgKz0gcGVyc29uLmF0dGVtcHRlZFxuXG4gICAgICBAdGFibGUucHVzaCBwZXJzb25cblxuICAgIEBzdW1tYXJ5LmFDb3JyZWN0ICA9IE1hdGguZGVjaW1hbHMoIEBzdW1tYXJ5LmFDb3JyZWN0IC8gQHRhYmxlLmxlbmd0aCwgMCApXG4gICAgQHN1bW1hcnkuYW5Db3JyZWN0ID0gTWF0aC5kZWNpbWFscyggQHN1bW1hcnkuYW5Db3JyZWN0IC8gQHRhYmxlLmxlbmd0aCwgMiApXG4gICAgQHN1bW1hcnkuYXR0ZW1wdGVkID0gTWF0aC5kZWNpbWFscyggQHN1bW1hcnkuYXR0ZW1wdGVkIC8gQHRhYmxlLmxlbmd0aCwgMiApXG5cbiAgICBmb3IgcGVyc29uIGluIEB0YWJsZVxuICAgICAgQHN1bW1hcnkuc3RkRGV2ICs9IE1hdGgucG93KHBlcnNvbi5wQ29ycmVjdCAtIEBzdW1tYXJ5LmFDb3JyZWN0LCAyKVxuXG4gICAgQHN1bW1hcnkuc3RkRGV2ID0gTWF0aC5kZWNpbWFscyhNYXRoLnBvdyggQHN1bW1hcnkuc3RkRGV2IC8gQHRhYmxlLmxlbmd0aCwgMC41KSwgMilcblxuICAgIGZvciBwZXJzb24sIGkgaW4gQHRhYmxlXG5cbiAgICAgIGRldiA9IChwZXJzb24ucENvcnJlY3QgLSBAc3VtbWFyeS5hQ29ycmVjdCkgLyBAc3VtbWFyeS5zdGREZXZcblxuICAgICAgZGV2SW5kZXggPSBNYXRoLnJvdW5kKGRldiAqIDEwMClcbiAgICAgIFxuICAgICAgcGVyY2VudGlsZSA9IGlmIGRldkluZGV4ID4gNDA5IG9yIGRldkluZGV4IDwgLTQwOVxuICAgICAgICAgIDBcbiAgICAgICAgZWxzZSBpZiBkZXZJbmRleCA+IDBcbiAgICAgICAgICAxMDAgKiBNYXRoLnJvdW5kKDUwICsgMTAwICogQG5vcm1hbEN1cnZlW2RldkluZGV4XSApIC8gMTAwIFxuICAgICAgICBlbHNlIGlmIGRldkluZGV4IDwgMFxuICAgICAgICAgIDEwMCAqIE1hdGgucm91bmQoNTAgLSAxMDAgKiBAbm9ybWFsQ3VydmVbZGV2SW5kZXggKiAtMV0gKSAvIDEwMFxuICAgICAgICBlbHNlXG4gICAgICAgICAgNTBcblxuICAgICAgcGMgPSBwZXJzb24ucENvcnJlY3RcblxuICAgICAgaW5kZXggPSBcbiAgICAgICAgaWYgcGMgPj0gODBcbiAgICAgICAgICBpbmRleCA9IDNcbiAgICAgICAgZWxzZSBpZiBwYyA+PSA2MCAmJiBwYyA8PSA3OVxuICAgICAgICAgIGluZGV4ID0gMlxuICAgICAgICBlbHNlIGlmIHBjID49IDMwICYmIHBjIDw9IDU5XG4gICAgICAgICAgaW5kZXggPSAxXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBpbmRleCA9IDBcblxuXG4gICAgICAjIG9sZCB3YXlcbiAgICAgICMgaW5kZXggPSBAZ2V0UXVhcnRpbGUocGVyY2VudGlsZSlcbiAgICAgIFxuICAgICAgIyMjIHNlbWktb2xkIHdheVxuICAgICAgTWF0aC5mbG9vcihwZXJzb24ucENvcnJlY3QgLyAxMDAgKiA0KVxuICAgICAgaW5kZXggPSAzIGlmIGluZGV4ID09IDRcbiAgICAgICMjI1xuXG4gICAgICBAdGFibGVbaV0uZGV2aWF0aW9uICA9IGRldkluZGV4IC8gMTAwXG4gICAgICBAdGFibGVbaV0ucGVyY2VudGlsZSA9IHBlcmNlbnRpbGVcbiAgICAgIEB0YWJsZVtpXS5pbmRleCAgICAgID0gaW5kZXhcbiAgICAgIEB0YWJsZVtpXS5zdGF0dXMgICAgID0gQHN0YXR1c1tpbmRleF1cblxuICAgICAgQHN1bW1hcnkud2F0Y2hMaXN0LnB1c2ggcGVyc29uLm5hbWUgaWYgaW5kZXggPT0gMCAmJiAhfkBzdW1tYXJ5LndhdGNoTGlzdC5pbmRleE9mKHBlcnNvbi5uYW1lIClcblxuICAgICMgU29ydCBkZXNjZW5kaW5nIGJ5ICUtY29ycmVjdFxuICAgIEB0YWJsZS5zb3J0IChhLCBiKSAtPiBiLnBDb3JyZWN0IC0gYS5wQ29ycmVjdFxuXG4gICAgXG4gICAgIyB3YXJuaW5nIGZsYWdzXG4gICAgblN0dWRlbnRzTm90UmVhZHkgPSAwXG4gICAgKG5TdHVkZW50c05vdFJlYWR5KysgaWYgcGVyc29uLnBDb3JyZWN0IDwgNzUpIGZvciBwZXJzb24gaW4gQHRhYmxlXG4gICAgcE5vdFJlYWR5ID0gKG5TdHVkZW50c05vdFJlYWR5L0B0YWJsZS5sZW5ndGgpICogMTAwXG4gICAgaXNDbGFzc1JlYWR5ID0gcE5vdFJlYWR5IDwgMjBcblxuICAgIHdhcm5pbmdJY29uID0gXCI8aW1nIHNyYz0naW1hZ2VzL2ljb25fd2Fybi5wbmcnPlwiXG4gICAgQHJlYWR5UGVyY2VudGFnZSA9IFwiPHA+I3tNYXRoLnJvdW5kKHBOb3RSZWFkeSl9JSBvZiB5b3VyIHN0dWRlbnRzIGFyZSBub3QgcmVhZHkgdG8gbW92ZSBvbiB0byB0aGUgbmV4dCBsZXNzb25zLjwvcD5cIlxuXG4gICAgY2xhc3NSZWFkeSA9IFwiSXQgaXMgb2sgdG8gbW92ZSBvbiBpbiB0aGUgbGVzc29uIHNlcXVlbmNlLiBNYWtlIHN1cmUgdGhhdCB0aG9zZSBjaGlsZHJlbiBwZXJmb3JtaW5nIGluIHRoZSDigJxwb29y4oCdIG9yIOKAnGNvbmNlcm5pbmfigJ0gY2F0ZWdvcnkgZ2V0IGV4dHJhIGF0dGVudGlvbiBhbmQgcHJhY3RpY2UgYW5kIGRvbuKAmXQgZmFsbCBiZWhpbmQuIFRoaXMgY2FuIGJlIGRvbmUgZHVyaW5nIHByYWN0aWNlIGxlc3NvbnMgb24gVHVlc2RheSBhbmQgVGh1cnNkYXlzLCBvciBkdXJpbmcgYW5vdGhlciBzdWJqZWN0IG9uIHRoZSB0aW1ldGFibGUuXCJcbiAgICBjbGFzc05vdFJlYWR5ID0gXCJZb3VyIGNsYXNzIG5lZWRzIGV4dHJhIHByYWN0aWNlLiBDb25zaWRlciByZS10ZWFjaGluZyBNb25kYXkgYW5kIFdlZG5lc2RheSBsZXNzb25zIGludHJvZHVjaW5nIHRoZSBuZXcgY3VycmljdWx1bSBpdGVtcyBvciBvcmdhbml6ZSBpbnRlbnNlIHByYWN0aWNlIGFjdGl2aXRpZXMgZm9yIHRoZSBlbnRpcmUgY2xhc3MuIFRvIGZpbmQgb3V0IHdoaWNoIGl0ZW1zIHN0dWRlbnRzIGFyZSBwYXJ0aWN1bGFybHkgc3RydWdnbGluZyB3aXRoLCBzZWxlY3QgdGhlIG5hbWUgb2YgYSBmZXcgc3R1ZGVudHMgaW4gdGhlIOKAnHBvb3LigJ0gb3Ig4oCcY29uY2VybmluZ+KAnSBjYXRlZ29yeSBhbmQgcmV2aWV3IHRoZWlyIHBlcmZvcm1hbmNlIGl0ZW0gYnkgaXRlbS4gVGFrZSBub3RlIG9mIGl0ZW1zIHRoYXQgc2VlbSBwYXJ0aWN1bGFybHkgdHJvdWJsZXNvbWUuXCJcblxuICAgIEByZWFkaW5lc3NXYXJuaW5nID0gaWYgaXNDbGFzc1JlYWR5IHRoZW4gY2xhc3NSZWFkeSBlbHNlIGNsYXNzTm90UmVhZHlcblxuICByZW5kZXI6IC0+XG5cbiAgICAjXG4gICAgIyBXYXJuaW5nc1xuICAgICNcblxuICAgIGlmICF+QHN1YnRlc3RzLnBsdWNrKFwicmVwb3J0VHlwZVwiKS5pbmRleE9mKFwicHJvZ3Jlc3NcIikgI2RvbnQgZGF0YSBndWlkYW5jZSBmb3IgcHJvZ3Jlc3NcblxuICAgICAgIyBkeW5hbWljXG4gICAgICB3YXJuaW5nc0hUTUwgPSBcIlxuICAgICAgPHNlY3Rpb24+XG4gICAgICAgICN7QHJlYWR5UGVyY2VudGFnZX1cbiAgICAgICAgI3tAcmVhZGluZXNzV2FybmluZ31cbiAgICAgIDwvc2VjdGlvbj5cbiAgICAgIFwiXG4gICAgICAjIHN0YXRpY1xuICAgICAgd2FybmluZ3NIVE1MICs9ICdcbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8cD5SZWZlciB0byB0aGUgZmlsZSDigJxLaXN3YWhpbGkgV29yZGxpc3Rz4oCdIG9uIHlvdXIgdGFibGV0IGZvciBhIGxpc3Qgb2YgYWRkaXRpb25hbCB3b3JkcyB0aGF0IG1heSBiZSB1c2VmdWwgZm9yIHN1Y2ggZ3JvdXAtYmFzZWQgYWN0aXZpdGllcyBvciBwcmFjdGljZSBmb3Igc3R1ZGVudHMgcGVyZm9ybWluZyBpbiB0aGUg4oCccG9vcuKAnSBvciDigJxjb25jZXJuaW5n4oCdIGNhdGVnb3J5LjwvcD5cbiAgICAgICAgPHA+Rm9yIHRoZSBzdHVkZW50cyB0byB3YXRjaCDigJMgY29uc2lkZXIgYWxzbyBjb21tdW5pY2F0aW5nIHdpdGggcGFyZW50cyBmb3IgZXh0cmEgcHJhY3RpY2UgYXQgaG9tZS48L3A+XG4gICAgICAgIDxwPklkZW50aWZ5IGl0ZW1zIHRoZXNlIHN0dWRlbnRzIG5lZWQgZnVydGhlciBwcmFjdGljZSBvbiBieSBzZWxlY3RpbmcgdGhlaXIgbmFtZSBpbiB0aGUgZ3JvdXBpbmcgcmVwb3J0IHRvIHNlZSB0aGVpciBwZXJmb3JtYW5jZSBvbiBlYWNoIGl0ZW0uPC9wPlxuICAgICAgICA8cD5HaXZlIHBhcmVudHMgc29tZSBoZWxwOiBXcml0ZSBvdXQgb24gYSBwaWVjZSBvZiBwYXBlciB0aGUgbGV0dGVycyBmb3IgdGhlbSB0byBwcmFjdGljZSB3aXRoIHRoZWlyIGNoaWxkOyBvciBjb3B5IGFwcGxpY2FibGUgd29yZHMgZnJvbSB0aGUg4oCcS2lzd2FoaWxpIFdvcmRsaXN0c+KAnSB0aGF0IGNvbnRhaW4gdGhlIGxldHRlcnMgZm9yIHRoZSBjaGlsZCB0byBwcmFjdGljZS48L3A+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgICAnXG5cblxuXG4gICAgI1xuICAgICMgRW1wdHkgd2FybmluZ1xuICAgICNcbiAgICBlbXB0eUhUTUwgPSBcIlxuICAgICAgPGgxPiN7dCgnc3R1ZGVudCBncm91cGluZyByZXBvcnQnKX08L2gxPlxuICAgICAgPHA+Tm8gc3R1ZGVudHMgdGVzdGVkIGZvciAje0BzdWJ0ZXN0cy5nZXQoQHNlbGVjdGVkLnN1YnRlc3RJZCkuZ2V0KFwibmFtZVwiKX0gb24gYXNzZXNzbWVudCAjI3tAc3VidGVzdHMubW9kZWxzWzBdLmdldChcInBhcnRcIil9IHlldC4gUmV0dXJuIHRvIHRoZSA8YSBocmVmPScjY2xhc3MnPmNsYXNzIG1lbnU8L2E+IGFuZCBjbGljayB0aGUgPGltZyBzcmM9J2ltYWdlcy9pY29uX3J1bi5wbmcnPiBpY29uIHRvIGNvbGxlY3QgZGF0YS48L3A+XG4gICAgXCJcblxuICAgICNcbiAgICAjIE1lbnVcbiAgICAjXG4gICAgbWVudUhUTUwgPSBcIjxkaXYgaWQ9J3NlbGVjdG9yX2NvbnRhaW5lcicgY2xhc3M9J2J1dHRvbnNldCc+XCJcbiAgICBmb3Igc3VidGVzdCBpbiBAc3VidGVzdHMubW9kZWxzXG4gICAgICBjaGVja2VkQXR0cmlidXRlID0gaWYgc3VidGVzdC5pZCA9PSBAc2VsZWN0ZWQuc3VidGVzdElkIHRoZW4gXCJjaGVja2VkPSdjaGVja2VkJ1wiIGVsc2UgXCJcIlxuICAgICAgbWVudUhUTUwgKz0gXCJcbiAgICAgICAgPGxhYmVsIGZvcj0nI3tzdWJ0ZXN0LmlkfSc+I3tzdWJ0ZXN0LmdldChcIm5hbWVcIil9PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9J3JhZGlvJyBjbGFzcz0nc2VsZWN0b3InIG5hbWU9J3NlbGVjdG9yJyBpZD0nI3tzdWJ0ZXN0LmlkfScgZGF0YS1zdWJ0ZXN0SWQ9JyN7c3VidGVzdC5pZH0nICN7Y2hlY2tlZEF0dHJpYnV0ZX0+XG4gICAgICBcIlxuICAgIG1lbnVIVE1MICs9IFwiPC9kaXY+XCJcblxuICAgICNcbiAgICAjIHN1bW1hcnlcbiAgICAjXG4gICAgc3VtbWFyeUhUTUwgPSBcIjxoMT5TdW1tYXJ5PC9oMT5cbiAgICA8dGFibGUgY2xhc3M9J3N1bW1hcnknPlxuICAgICAgPHRyPjx0aD5TdWJ0ZXN0IE5hbWU8L3RoPiAgICAgICAgICA8dGQ+I3tAc3VtbWFyeS5uYW1lfTwvdGQ+PC90cj5cbiAgICAgIDx0cj48dGg+Q2xhc3MgU2l6ZTwvdGg+ICAgICAgICAgICAgPHRkPiN7QHN1bW1hcnkuY2xhc3NTaXplfTwvdGQ+PC90cj5cbiAgICAgIDx0cj48dGg+U3R1ZGVudHMgQXNzZXNzZWQ8L3RoPiAgICAgPHRkPiN7QHN1bW1hcnkucmVzdWx0Q291bnR9PC90ZD48L3RyPlxuICAgICAgPHRyPjx0aD5BdmVyYWdlIENvcnJlY3QgKCUpPC90aD4gICA8dGQ+I3tAc3VtbWFyeS5hQ29ycmVjdH0lPC90ZD48L3RyPlxuICAgICAgPHRyPjx0aD5BdmVyYWdlIENvcnJlY3Q8L3RoPiAgICAgICA8dGQ+I3tAc3VtbWFyeS5hbkNvcnJlY3R9IC8gI3tAc3VtbWFyeS5hdHRlbXB0ZWR9PC90ZD48L3RyPlxuICAgICAgPHRyPjx0aD5TdHVkZW50cyB0byB3YXRjaDwvdGg+ICAgICA8dGQ+I3tAc3VtbWFyeS53YXRjaExpc3Quam9pbignLCAnKX08L3RkPjwvdHI+XG4gICAgPC90YWJsZT5cIlxuXG4gICAgI1xuICAgICMgZGV0YWlsc1xuICAgICNcbiAgICBkZXRhaWxzSFRNTCA9IFwiXG4gICAgICA8aDE+U3R1ZGVudCBncm91cGluZzwvaDE+XG4gICAgICA8dGFibGUgY2xhc3M9J2RldGFpbHMnPlxuICAgICAgPHRyPlxuICAgICAgICA8dGg+TmFtZTwvdGg+XG4gICAgICAgIDx0aD4lIGNvcnJlY3Q8L3RoPlxuICAgICAgICA8dGg+U3RhdHVzPC90aD5cbiAgICAgIDwvdHI+XG4gICAgXCJcblxuICAgIGl0ZW1pemVkUmVzdWx0cyA9IFwiXCJcblxuICAgIGZvciBwZXJzb24gaW4gQHRhYmxlXG4gICAgICBkZXRhaWxzSFRNTCArPSBcIlxuICAgICAgICA8dHIgY2xhc3M9JyN7QGNvbG9yQ2xhc3NbcGVyc29uLmluZGV4XX0nPlxuICAgICAgICAgIDx0ZCBjbGFzcz0nc3R1ZGVudF9uYW1lIGljb24nIGRhdGEtc3R1ZGVudElkPScje3BlcnNvbi5zdHVkZW50SWR9Jz4je3BlcnNvbi5uYW1lfTwvdGQ+XG4gICAgICAgICAgPHRkPiN7cGVyc29uLnBDb3JyZWN0fTwvdGQ+XG4gICAgICAgICAgPHRkPiN7cGVyc29uLnN0YXR1c308L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgICBcIlxuXG4gICAgICBpdGVtaXplZFJlc3VsdHMgKz0gXCJcbiAgICAgICAgPHRhYmxlIGNsYXNzPSdpdGVtaXplZF9yZXN1bHRzIGNvbmZpcm1hdGlvbiBzdHVkZW50XyN7cGVyc29uLnN0dWRlbnRJZH0nPlxuICAgICAgICAgIDx0Ym9keT48dHI+PHRoPkl0ZW08L3RoPjx0aD5SZXN1bHQ8L3RoPjwvdHI+XG4gICAgICBcIlxuXG4gICAgICBmb3IgZGF0dW0sIGkgaW4gcGVyc29uLml0ZW1zXG4gICAgICAgIGl0ZW1pemVkUmVzdWx0cyArPSBcIjx0cj48dGQ+I3tkYXR1bS5pdGVtTGFiZWx9PC90ZD48dGQ+I3t0KGRhdHVtLml0ZW1SZXN1bHQpfTwvdGQ+PC90cj5cIlxuICAgICAgaXRlbWl6ZWRSZXN1bHRzICs9IFwiPC90Ym9keT48L3RhYmxlPlwiXG5cblxuICAgIGRldGFpbHNIVE1MICs9IFwiPC90YWJsZT5cIlxuXG5cblxuICAgIGlmIEBzZWxlY3RlZC5yZXN1bHRzLmxlbmd0aCAhPSAwXG4gICAgICBodG1sID0gXCJcbiAgICAgICAgI3ttZW51SFRNTH1cbiAgICAgICAgI3tzdW1tYXJ5SFRNTH1cbiAgICAgICAgI3tkZXRhaWxzSFRNTH1cbiAgICAgICAgI3tpdGVtaXplZFJlc3VsdHN9XG4gICAgICAgICN7d2FybmluZ3NIVE1MIHx8IFwiXCJ9XG4gICAgICAgIDxidXR0b24gY2xhc3M9J25hdmlnYXRpb24gYmFjayc+QmFjazwvYnV0dG9uPlxuICAgICAgXCJcbiAgICBlbHNlXG4gICAgICBodG1sID0gXCJcbiAgICAgICAgI3ttZW51SFRNTH1cbiAgICAgICAgI3tlbXB0eUhUTUx9XG4gICAgICAgIDxidXR0b24gY2xhc3M9J25hdmlnYXRpb24gYmFjayc+QmFjazwvYnV0dG9uPlxuICAgICAgXCJcblxuICAgIEAkZWwuaHRtbCBodG1sXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG4gIFxuICAjIDAtaW5kZXhlZCBxdWFydGlsZVxuICBnZXRRdWFydGlsZTogKHBlcmNlbnRpbGUpIC0+IE1hdGgucm91bmQgKChwZXJjZW50aWxlIC8gMTAwKSAqIDMpXG4iXX0=
