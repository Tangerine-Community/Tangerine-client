var DatetimeRunItemView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DatetimeRunItemView = (function(superClass) {
  extend(DatetimeRunItemView, superClass);

  function DatetimeRunItemView() {
    return DatetimeRunItemView.__super__.constructor.apply(this, arguments);
  }

  DatetimeRunItemView.prototype.template = JST["Datetime"];

  DatetimeRunItemView.prototype.className = "datetimeitem";

  DatetimeRunItemView.prototype.i18n = function() {
    return this.text = {
      year: t("DatetimeRunView.label.year"),
      month: t("DatetimeRunView.label.month"),
      day: t("DatetimeRunView.label.day"),
      time: t("DatetimeRunView.label.time"),
      "help": t("SubtestRunView.button.help")
    };
  };

  DatetimeRunItemView.prototype.initialize = function(options) {
    var labels, ui;
    Tangerine.progress.currentSubview = this;
    this.i18n();
    this.model = options.model;
    this.parent = this.model.parent;
    this.dataEntry = options.dataEntry;
    labels = {};
    labels.text = this.text;
    this.model.set('labels', labels);
    ui = {};
    ui.text = this.text;
    this.model.set('ui', ui);
    this.skippable = this.model.get("skippable") === true || this.model.get("skippable") === "true";
    this.backable = (this.model.get("backButton") === true || this.model.get("backButton") === "true") && this.parent.index !== 0;
    this.parent.displaySkip(this.skippable);
    return this.parent.displayBack(this.backable);
  };

  DatetimeRunItemView.prototype.onBeforeRender = function() {
    var dateTime, formElements, minutes, previous;
    dateTime = new Date();
    formElements = {};
    formElements.year = dateTime.getFullYear();
    formElements.months = [t("jan"), t("feb"), t("mar"), t("apr"), t("may"), t("jun"), t("jul"), t("aug"), t("sep"), t("oct"), t("nov"), t("dec")];
    formElements.month = formElements.months[dateTime.getMonth()];
    formElements.day = dateTime.getDate();
    minutes = dateTime.getMinutes();
    formElements.minutes = minutes;
    if (minutes < 10) {
      formElements.minutes = "0" + minutes;
    }
    formElements.time = dateTime.getHours() + ":" + minutes;
    if (!this.dataEntry) {
      previous = this.model.parent.result.getByHash(this.model.get('hash'));
      if (previous) {
        formElements.year = previous.year;
        formElements.month = previous.month;
        formElements.day = previous.day;
        formElements.time = previous.time;
      }
    }
    this.model.set('formElements', formElements);
    this.trigger("rendered");
    return this.trigger("ready");
  };

  DatetimeRunItemView.prototype.getResult = function() {
    var hash, result, subtestResult;
    result = {
      "year": this.$el.find("#year").val(),
      "month": this.$el.find("#month").val(),
      "day": this.$el.find("#day").val(),
      "time": this.$el.find("#time").val()
    };
    if (this.model.has("hash")) {
      hash = this.model.get("hash");
    }
    return subtestResult = {
      'body': result,
      'meta': {
        'hash': hash
      }
    };
  };

  DatetimeRunItemView.prototype.getSkipped = function() {
    return {
      "year": "skipped",
      "month": "skipped",
      "day": "skipped",
      "time": "skipped"
    };
  };

  DatetimeRunItemView.prototype.isValid = function() {
    return true;
  };

  DatetimeRunItemView.prototype.testValid = function() {
    return true;
  };

  DatetimeRunItemView.prototype.showErrors = function() {
    return true;
  };

  DatetimeRunItemView.prototype.next = function() {
    console.log("next!!");
    this.prototypeView.on("click .next", (function(_this) {
      return function() {
        console.log("clickme!");
        return _this.next();
      };
    })(this));
    return this.parent.next();
  };

  DatetimeRunItemView.prototype.back = function() {
    return this.parent.back();
  };

  return DatetimeRunItemView;

})(Backbone.Marionette.ItemView);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvc3VidGVzdC9wcm90b3R5cGVzL0RhdGV0aW1lUnVuSXRlbVZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsbUJBQUE7RUFBQTs7O0FBQU07Ozs7Ozs7Z0NBRUosUUFBQSxHQUFVLEdBQUksQ0FBQSxVQUFBOztnQ0FDZCxTQUFBLEdBQVc7O2dDQUVYLElBQUEsR0FBTSxTQUFBO1dBRUosSUFBQyxDQUFBLElBQUQsR0FDRTtNQUFBLElBQUEsRUFBTyxDQUFBLENBQUUsNEJBQUYsQ0FBUDtNQUNBLEtBQUEsRUFBUSxDQUFBLENBQUUsNkJBQUYsQ0FEUjtNQUVBLEdBQUEsRUFBTSxDQUFBLENBQUUsMkJBQUYsQ0FGTjtNQUdBLElBQUEsRUFBTyxDQUFBLENBQUUsNEJBQUYsQ0FIUDtNQUlBLE1BQUEsRUFBUyxDQUFBLENBQUUsNEJBQUYsQ0FKVDs7RUFIRTs7Z0NBU04sVUFBQSxHQUFZLFNBQUMsT0FBRDtBQUNWLFFBQUE7SUFBQSxTQUFTLENBQUMsUUFBUSxDQUFDLGNBQW5CLEdBQW9DO0lBQ3BDLElBQUMsQ0FBQSxJQUFELENBQUE7SUFFQSxJQUFDLENBQUEsS0FBRCxHQUFVLE9BQU8sQ0FBQztJQUVsQixJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFDakIsSUFBQyxDQUFBLFNBQUQsR0FBYSxPQUFPLENBQUM7SUFDckIsTUFBQSxHQUFTO0lBQ1QsTUFBTSxDQUFDLElBQVAsR0FBYyxJQUFDLENBQUE7SUFDZixJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxRQUFYLEVBQXFCLE1BQXJCO0lBRUEsRUFBQSxHQUFLO0lBR0wsRUFBRSxDQUFDLElBQUgsR0FBVSxJQUFDLENBQUE7SUFDWCxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxJQUFYLEVBQWlCLEVBQWpCO0lBRUEsSUFBQyxDQUFBLFNBQUQsR0FBYSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxXQUFYLENBQUEsS0FBMkIsSUFBM0IsSUFBbUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsV0FBWCxDQUFBLEtBQTJCO0lBQzNFLElBQUMsQ0FBQSxRQUFELEdBQVksQ0FBRSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxZQUFYLENBQUEsS0FBNEIsSUFBNUIsSUFBb0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsWUFBWCxDQUFBLEtBQTRCLE1BQWxFLENBQUEsSUFBK0UsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFSLEtBQW1CO0lBQzlHLElBQUMsQ0FBQSxNQUFNLENBQUMsV0FBUixDQUFvQixJQUFDLENBQUEsU0FBckI7V0FDQSxJQUFDLENBQUEsTUFBTSxDQUFDLFdBQVIsQ0FBb0IsSUFBQyxDQUFBLFFBQXJCO0VBckJVOztnQ0F1QlosY0FBQSxHQUFnQixTQUFBO0FBQ2QsUUFBQTtJQUFBLFFBQUEsR0FBZSxJQUFBLElBQUEsQ0FBQTtJQUNmLFlBQUEsR0FBZTtJQUNmLFlBQVksQ0FBQyxJQUFiLEdBQXdCLFFBQVEsQ0FBQyxXQUFULENBQUE7SUFDeEIsWUFBWSxDQUFDLE1BQWIsR0FBd0IsQ0FBQyxDQUFBLENBQUUsS0FBRixDQUFELEVBQVUsQ0FBQSxDQUFFLEtBQUYsQ0FBVixFQUFtQixDQUFBLENBQUUsS0FBRixDQUFuQixFQUE0QixDQUFBLENBQUUsS0FBRixDQUE1QixFQUFxQyxDQUFBLENBQUUsS0FBRixDQUFyQyxFQUE4QyxDQUFBLENBQUUsS0FBRixDQUE5QyxFQUF1RCxDQUFBLENBQUUsS0FBRixDQUF2RCxFQUFnRSxDQUFBLENBQUUsS0FBRixDQUFoRSxFQUF5RSxDQUFBLENBQUUsS0FBRixDQUF6RSxFQUFrRixDQUFBLENBQUUsS0FBRixDQUFsRixFQUEyRixDQUFBLENBQUUsS0FBRixDQUEzRixFQUFvRyxDQUFBLENBQUUsS0FBRixDQUFwRztJQUN4QixZQUFZLENBQUMsS0FBYixHQUF3QixZQUFZLENBQUMsTUFBTyxDQUFBLFFBQVEsQ0FBQyxRQUFULENBQUEsQ0FBQTtJQUM1QyxZQUFZLENBQUMsR0FBYixHQUF3QixRQUFRLENBQUMsT0FBVCxDQUFBO0lBQ3hCLE9BQUEsR0FBK0IsUUFBUSxDQUFDLFVBQVQsQ0FBQTtJQUMvQixZQUFZLENBQUMsT0FBYixHQUF3QjtJQUN4QixJQUF5QyxPQUFBLEdBQVUsRUFBbkQ7TUFBQSxZQUFZLENBQUMsT0FBYixHQUF3QixHQUFBLEdBQU0sUUFBOUI7O0lBQ0EsWUFBWSxDQUFDLElBQWIsR0FBd0IsUUFBUSxDQUFDLFFBQVQsQ0FBQSxDQUFBLEdBQXNCLEdBQXRCLEdBQTRCO0lBRXBELElBQUEsQ0FBTyxJQUFDLENBQUEsU0FBUjtNQUVFLFFBQUEsR0FBWSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBckIsQ0FBK0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsTUFBWCxDQUEvQjtNQUVaLElBQUcsUUFBSDtRQUNFLFlBQVksQ0FBQyxJQUFiLEdBQXFCLFFBQVEsQ0FBQztRQUM5QixZQUFZLENBQUMsS0FBYixHQUFxQixRQUFRLENBQUM7UUFDOUIsWUFBWSxDQUFDLEdBQWIsR0FBcUIsUUFBUSxDQUFDO1FBQzlCLFlBQVksQ0FBQyxJQUFiLEdBQXFCLFFBQVEsQ0FBQyxLQUpoQztPQUpGOztJQVVBLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLGNBQVgsRUFBMkIsWUFBM0I7SUFDQSxJQUFDLENBQUEsT0FBRCxDQUFTLFVBQVQ7V0FDQSxJQUFDLENBQUEsT0FBRCxDQUFTLE9BQVQ7RUF4QmM7O2dDQTBCaEIsU0FBQSxHQUFXLFNBQUE7QUFDVCxRQUFBO0lBQUEsTUFBQSxHQUNFO01BQUEsTUFBQSxFQUFVLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBTCxDQUFVLE9BQVYsQ0FBa0IsQ0FBQyxHQUFuQixDQUFBLENBQVY7TUFDQSxPQUFBLEVBQVUsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsUUFBVixDQUFtQixDQUFDLEdBQXBCLENBQUEsQ0FEVjtNQUVBLEtBQUEsRUFBVSxJQUFDLENBQUEsR0FBRyxDQUFDLElBQUwsQ0FBVSxNQUFWLENBQWlCLENBQUMsR0FBbEIsQ0FBQSxDQUZWO01BR0EsTUFBQSxFQUFVLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBTCxDQUFVLE9BQVYsQ0FBa0IsQ0FBQyxHQUFuQixDQUFBLENBSFY7O0lBSUYsSUFBNkIsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsTUFBWCxDQUE3QjtNQUFBLElBQUEsR0FBTyxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxNQUFYLEVBQVA7O1dBQ0EsYUFBQSxHQUNFO01BQUEsTUFBQSxFQUFTLE1BQVQ7TUFDQSxNQUFBLEVBQ0U7UUFBQSxNQUFBLEVBQVMsSUFBVDtPQUZGOztFQVJPOztnQ0FZWCxVQUFBLEdBQVksU0FBQTtBQUNWLFdBQU87TUFDTCxNQUFBLEVBQVUsU0FETDtNQUVMLE9BQUEsRUFBVSxTQUZMO01BR0wsS0FBQSxFQUFVLFNBSEw7TUFJTCxNQUFBLEVBQVUsU0FKTDs7RUFERzs7Z0NBUVosT0FBQSxHQUFTLFNBQUE7V0FDUDtFQURPOztnQ0FHVCxTQUFBLEdBQVcsU0FBQTtXQUVUO0VBRlM7O2dDQVdYLFVBQUEsR0FBWSxTQUFBO1dBQ1Y7RUFEVTs7Z0NBR1osSUFBQSxHQUFNLFNBQUE7SUFDSixPQUFPLENBQUMsR0FBUixDQUFZLFFBQVo7SUFDQSxJQUFDLENBQUEsYUFBYSxDQUFDLEVBQWYsQ0FBa0IsYUFBbEIsRUFBb0MsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO1FBQ2xDLE9BQU8sQ0FBQyxHQUFSLENBQVksVUFBWjtlQUNBLEtBQUksQ0FBQyxJQUFMLENBQUE7TUFGa0M7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXBDO1dBR0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLENBQUE7RUFMSTs7Z0NBTU4sSUFBQSxHQUFNLFNBQUE7V0FBRyxJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsQ0FBQTtFQUFIOzs7O0dBMUcwQixRQUFRLENBQUMsVUFBVSxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvc3VidGVzdC9wcm90b3R5cGVzL0RhdGV0aW1lUnVuSXRlbVZpZXcuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBEYXRldGltZVJ1bkl0ZW1WaWV3IGV4dGVuZHMgQmFja2JvbmUuTWFyaW9uZXR0ZS5JdGVtVmlld1xuXG4gIHRlbXBsYXRlOiBKU1RbXCJEYXRldGltZVwiXVxuICBjbGFzc05hbWU6IFwiZGF0ZXRpbWVpdGVtXCJcblxuICBpMThuOiAtPlxuXG4gICAgQHRleHQgPVxuICAgICAgeWVhciA6IHQoXCJEYXRldGltZVJ1blZpZXcubGFiZWwueWVhclwiKVxuICAgICAgbW9udGggOiB0KFwiRGF0ZXRpbWVSdW5WaWV3LmxhYmVsLm1vbnRoXCIpXG4gICAgICBkYXkgOiB0KFwiRGF0ZXRpbWVSdW5WaWV3LmxhYmVsLmRheVwiKVxuICAgICAgdGltZSA6IHQoXCJEYXRldGltZVJ1blZpZXcubGFiZWwudGltZVwiKVxuICAgICAgXCJoZWxwXCIgOiB0KFwiU3VidGVzdFJ1blZpZXcuYnV0dG9uLmhlbHBcIilcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBUYW5nZXJpbmUucHJvZ3Jlc3MuY3VycmVudFN1YnZpZXcgPSBAXG4gICAgQGkxOG4oKVxuXG4gICAgQG1vZGVsICA9IG9wdGlvbnMubW9kZWxcbiMgICAgQHBhcmVudCA9IG9wdGlvbnMucGFyZW50XG4gICAgQHBhcmVudCA9IEBtb2RlbC5wYXJlbnRcbiAgICBAZGF0YUVudHJ5ID0gb3B0aW9ucy5kYXRhRW50cnlcbiAgICBsYWJlbHMgPSB7fVxuICAgIGxhYmVscy50ZXh0ID0gQHRleHRcbiAgICBAbW9kZWwuc2V0KCdsYWJlbHMnLCBsYWJlbHMpXG5cbiAgICB1aSA9IHt9XG4jICAgIHVpLnNraXBCdXR0b24gPSBcIjxidXR0b24gY2xhc3M9J3NraXAgbmF2aWdhdGlvbic+I3tAdGV4dC5za2lwfTwvYnV0dG9uPlwiIGlmIHNraXBwYWJsZVxuIyAgICB1aS5iYWNrQnV0dG9uID0gXCI8YnV0dG9uIGNsYXNzPSdzdWJ0ZXN0LWJhY2sgbmF2aWdhdGlvbic+I3tAdGV4dC5iYWNrfTwvYnV0dG9uPlwiIGlmIGJhY2thYmxlXG4gICAgdWkudGV4dCA9IEB0ZXh0XG4gICAgQG1vZGVsLnNldCgndWknLCB1aSlcblxuICAgIEBza2lwcGFibGUgPSBAbW9kZWwuZ2V0KFwic2tpcHBhYmxlXCIpID09IHRydWUgfHwgQG1vZGVsLmdldChcInNraXBwYWJsZVwiKSA9PSBcInRydWVcIlxuICAgIEBiYWNrYWJsZSA9ICggQG1vZGVsLmdldChcImJhY2tCdXR0b25cIikgPT0gdHJ1ZSB8fCBAbW9kZWwuZ2V0KFwiYmFja0J1dHRvblwiKSA9PSBcInRydWVcIiApIGFuZCBAcGFyZW50LmluZGV4IGlzbnQgMFxuICAgIEBwYXJlbnQuZGlzcGxheVNraXAoQHNraXBwYWJsZSlcbiAgICBAcGFyZW50LmRpc3BsYXlCYWNrKEBiYWNrYWJsZSlcblxuICBvbkJlZm9yZVJlbmRlcjogLT5cbiAgICBkYXRlVGltZSA9IG5ldyBEYXRlKClcbiAgICBmb3JtRWxlbWVudHMgPSB7fVxuICAgIGZvcm1FbGVtZW50cy55ZWFyICAgICA9IGRhdGVUaW1lLmdldEZ1bGxZZWFyKClcbiAgICBmb3JtRWxlbWVudHMubW9udGhzICAgPSBbdChcImphblwiKSx0KFwiZmViXCIpLHQoXCJtYXJcIiksdChcImFwclwiKSx0KFwibWF5XCIpLHQoXCJqdW5cIiksdChcImp1bFwiKSx0KFwiYXVnXCIpLHQoXCJzZXBcIiksdChcIm9jdFwiKSx0KFwibm92XCIpLHQoXCJkZWNcIildXG4gICAgZm9ybUVsZW1lbnRzLm1vbnRoICAgID0gZm9ybUVsZW1lbnRzLm1vbnRoc1tkYXRlVGltZS5nZXRNb250aCgpXVxuICAgIGZvcm1FbGVtZW50cy5kYXkgICAgICA9IGRhdGVUaW1lLmdldERhdGUoKVxuICAgIG1pbnV0ZXMgICAgICAgICAgICAgICAgICAgICAgPSBkYXRlVGltZS5nZXRNaW51dGVzKClcbiAgICBmb3JtRWxlbWVudHMubWludXRlcyAgPSBtaW51dGVzXG4gICAgZm9ybUVsZW1lbnRzLm1pbnV0ZXMgID0gXCIwXCIgKyBtaW51dGVzIGlmIG1pbnV0ZXMgPCAxMFxuICAgIGZvcm1FbGVtZW50cy50aW1lICAgICA9IGRhdGVUaW1lLmdldEhvdXJzKCkgKyBcIjpcIiArIG1pbnV0ZXNcblxuICAgIHVubGVzcyBAZGF0YUVudHJ5XG5cbiAgICAgIHByZXZpb3VzID0gIEBtb2RlbC5wYXJlbnQucmVzdWx0LmdldEJ5SGFzaChAbW9kZWwuZ2V0KCdoYXNoJykpXG5cbiAgICAgIGlmIHByZXZpb3VzXG4gICAgICAgIGZvcm1FbGVtZW50cy55ZWFyICA9IHByZXZpb3VzLnllYXJcbiAgICAgICAgZm9ybUVsZW1lbnRzLm1vbnRoID0gcHJldmlvdXMubW9udGhcbiAgICAgICAgZm9ybUVsZW1lbnRzLmRheSAgID0gcHJldmlvdXMuZGF5XG4gICAgICAgIGZvcm1FbGVtZW50cy50aW1lICA9IHByZXZpb3VzLnRpbWVcblxuICAgIEBtb2RlbC5zZXQoJ2Zvcm1FbGVtZW50cycsIGZvcm1FbGVtZW50cylcbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiAgICBAdHJpZ2dlciBcInJlYWR5XCJcblxuICBnZXRSZXN1bHQ6IC0+XG4gICAgcmVzdWx0ID1cbiAgICAgIFwieWVhclwiICA6IEAkZWwuZmluZChcIiN5ZWFyXCIpLnZhbCgpXG4gICAgICBcIm1vbnRoXCIgOiBAJGVsLmZpbmQoXCIjbW9udGhcIikudmFsKClcbiAgICAgIFwiZGF5XCIgICA6IEAkZWwuZmluZChcIiNkYXlcIikudmFsKClcbiAgICAgIFwidGltZVwiICA6IEAkZWwuZmluZChcIiN0aW1lXCIpLnZhbCgpXG4gICAgaGFzaCA9IEBtb2RlbC5nZXQoXCJoYXNoXCIpIGlmIEBtb2RlbC5oYXMoXCJoYXNoXCIpXG4gICAgc3VidGVzdFJlc3VsdCA9XG4gICAgICAnYm9keScgOiByZXN1bHRcbiAgICAgICdtZXRhJyA6XG4gICAgICAgICdoYXNoJyA6IGhhc2hcblxuICBnZXRTa2lwcGVkOiAtPlxuICAgIHJldHVybiB7XG4gICAgICBcInllYXJcIiAgOiBcInNraXBwZWRcIlxuICAgICAgXCJtb250aFwiIDogXCJza2lwcGVkXCJcbiAgICAgIFwiZGF5XCIgICA6IFwic2tpcHBlZFwiXG4gICAgICBcInRpbWVcIiAgOiBcInNraXBwZWRcIlxuICAgIH1cblxuICBpc1ZhbGlkOiAtPlxuICAgIHRydWVcblxuICB0ZXN0VmFsaWQ6IC0+XG4jICAgIGNvbnNvbGUubG9nKFwiRGF0ZXRpbWVydW5JVGVtIHRlc3RWYWxpZC5cIilcbiAgICB0cnVlXG4jICAgIGlmIG5vdCBAcHJvdG90eXBlUmVuZGVyZWQgdGhlbiByZXR1cm4gZmFsc2VcbiMgICAgY3VycmVudFZpZXcgPSBUYW5nZXJpbmUucHJvZ3Jlc3MuY3VycmVudFN1YnZpZXdcbiMgICAgaWYgaXNWYWxpZD9cbiMgICAgICByZXR1cm4gaXNWYWxpZCgpXG4jICAgIGVsc2VcbiMgICAgICByZXR1cm4gZmFsc2VcbiMgICAgdHJ1ZVxuXG4gIHNob3dFcnJvcnM6IC0+XG4gICAgdHJ1ZVxuXG4gIG5leHQ6IC0+XG4gICAgY29uc29sZS5sb2coXCJuZXh0ISFcIilcbiAgICBAcHJvdG90eXBlVmlldy5vbiBcImNsaWNrIC5uZXh0XCIsICAgID0+XG4gICAgICBjb25zb2xlLmxvZyhcImNsaWNrbWUhXCIpXG4gICAgICB0aGlzLm5leHQoKVxuICAgIEBwYXJlbnQubmV4dCgpXG4gIGJhY2s6IC0+IEBwYXJlbnQuYmFjaygpXG5cblxuIl19
