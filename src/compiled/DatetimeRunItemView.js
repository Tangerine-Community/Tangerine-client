var DatetimeRunItemView;

DatetimeRunItemView = Backbone.Marionette.CompositeView.extend({
  template: JST["Datetime"],
  className: "datetimeitem",
  i18n: function() {
    return this.text = {
      year: t("DatetimeRunView.label.year"),
      month: t("DatetimeRunView.label.month"),
      day: t("DatetimeRunView.label.day"),
      time: t("DatetimeRunView.label.time"),
      "help": t("SubtestRunView.button.help")
    };
  },
  initialize: function(options) {
    var labels;
    Tangerine.progress.currentSubview = this;
    this.i18n();
    this.model = options.model;
    this.parent = options.parent;
    this.dataEntry = options.dataEntry;
    labels = {};
    labels.text = this.text;
    return this.model.set('labels', labels);
  },
  onBeforeRender: function() {
    var dateTime, formElements, minutes, previous;
    dateTime = new Date();
    formElements = {};
    formElements.year = dateTime.getFullYear();
    formElements.months = [t("jan"), t("feb"), t("mar"), t("apr"), t("may"), t("jun"), t("jul"), t("aug"), t("sep"), t("oct"), t("nov"), t("dec")];
    formElements.month = formElements.months[dateTime.getMonth()];
    formElements.day = dateTime.getDate();
    minutes = dateTime.getMinutes();
    formElements.minutes = minutes;
    if (minutes < 10) {
      formElements.minutes = "0" + minutes;
    }
    formElements.time = dateTime.getHours() + ":" + minutes;
    if (!this.dataEntry) {
      previous = this.model.parent.result.getByHash(this.model.get('hash'));
      if (previous) {
        formElements.year = previous.year;
        formElements.month = previous.month;
        formElements.day = previous.day;
        formElements.time = previous.time;
      }
    }
    this.model.set('formElements', formElements);
    this.trigger("rendered");
    return this.trigger("ready");
  },
  getResult: function() {
    var hash, result, subtestResult;
    result = {
      "year": this.$el.find("#year").val(),
      "month": this.$el.find("#month").val(),
      "day": this.$el.find("#day").val(),
      "time": this.$el.find("#time").val()
    };
    if (this.model.has("hash")) {
      hash = this.model.get("hash");
    }
    return subtestResult = {
      'body': result,
      'meta': {
        'hash': hash
      }
    };
  },
  getSkipped: function() {
    return {
      "year": "skipped",
      "month": "skipped",
      "day": "skipped",
      "time": "skipped"
    };
  },
  isValid: function() {
    return true;
  },
  testValid: function() {
    return true;
  },
  showErrors: function() {
    return true;
  },
  next: function() {
    console.log("next!!");
    this.prototypeView.on("click .next", (function(_this) {
      return function() {
        console.log("clickme!");
        return _this.next();
      };
    })(this));
    return this.parent.next();
  },
  back: function() {
    return this.parent.back();
  }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvc3VidGVzdC9wcm90b3R5cGVzL0RhdGV0aW1lUnVuSXRlbVZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsbUJBQUEsR0FBdUIsUUFBUSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsTUFBbEMsQ0FFckI7RUFBQSxRQUFBLEVBQVUsR0FBSSxDQUFBLFVBQUEsQ0FBZDtFQUNBLFNBQUEsRUFBVyxjQURYO0VBR0EsSUFBQSxFQUFNLFNBQUE7V0FFSixJQUFDLENBQUEsSUFBRCxHQUNFO01BQUEsSUFBQSxFQUFPLENBQUEsQ0FBRSw0QkFBRixDQUFQO01BQ0EsS0FBQSxFQUFRLENBQUEsQ0FBRSw2QkFBRixDQURSO01BRUEsR0FBQSxFQUFNLENBQUEsQ0FBRSwyQkFBRixDQUZOO01BR0EsSUFBQSxFQUFPLENBQUEsQ0FBRSw0QkFBRixDQUhQO01BSUEsTUFBQSxFQUFTLENBQUEsQ0FBRSw0QkFBRixDQUpUOztFQUhFLENBSE47RUFZQSxVQUFBLEVBQVksU0FBQyxPQUFEO0FBQ1YsUUFBQTtJQUFBLFNBQVMsQ0FBQyxRQUFRLENBQUMsY0FBbkIsR0FBb0M7SUFDcEMsSUFBQyxDQUFBLElBQUQsQ0FBQTtJQUVBLElBQUMsQ0FBQSxLQUFELEdBQVUsT0FBTyxDQUFDO0lBQ2xCLElBQUMsQ0FBQSxNQUFELEdBQVUsT0FBTyxDQUFDO0lBQ2xCLElBQUMsQ0FBQSxTQUFELEdBQWEsT0FBTyxDQUFDO0lBQ3JCLE1BQUEsR0FBUztJQUNULE1BQU0sQ0FBQyxJQUFQLEdBQWMsSUFBQyxDQUFBO1dBQ2YsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsUUFBWCxFQUFxQixNQUFyQjtFQVRVLENBWlo7RUF1QkEsY0FBQSxFQUFnQixTQUFBO0FBQ2QsUUFBQTtJQUFBLFFBQUEsR0FBZSxJQUFBLElBQUEsQ0FBQTtJQUNmLFlBQUEsR0FBZTtJQUNmLFlBQVksQ0FBQyxJQUFiLEdBQXdCLFFBQVEsQ0FBQyxXQUFU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QVMsU0FBQTtXQUNQO0VBRE8sQ0FyRVQ7RUF3RUEsU0FBQSxFQUFXLFNBQUE7V0FFVDtFQUZTLENBeEVYO0VBbUZBLFVBQUEsRUFBWSxTQUFBO1dBQ1Y7RUFEVSxDQW5GWjtFQXNGQSxJQUFBLEVBQU0sU0FBQTtJQUNKLE9BQU8sQ0FBQyxHQUFSLENBQVksUUFBWjtJQUNBLElBQUMsQ0FBQSxhQUFhLENBQUMsRUFBZixDQUFrQixhQUFsQixFQUFvQyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7UUFDbEMsT0FBTyxDQUFDLEdBQVIsQ0FBWSxVQUFaO2VBQ0EsS0FBSSxDQUFDLElBQUwsQ0FBQTtNQUZrQztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBcEM7V0FHQSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsQ0FBQTtFQUxJLENBdEZOO0VBNEZBLElBQUEsRUFBTSxTQUFBO1dBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLENBQUE7RUFBSCxDQTVGTjtDQUZxQiIsImZpbGUiOiJtb2R1bGVzL3N1YnRlc3QvcHJvdG90eXBlcy9EYXRldGltZVJ1bkl0ZW1WaWV3LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiRGF0ZXRpbWVSdW5JdGVtVmlldyA9ICBCYWNrYm9uZS5NYXJpb25ldHRlLkNvbXBvc2l0ZVZpZXcuZXh0ZW5kXG5cbiAgdGVtcGxhdGU6IEpTVFtcIkRhdGV0aW1lXCJdXG4gIGNsYXNzTmFtZTogXCJkYXRldGltZWl0ZW1cIlxuXG4gIGkxOG46IC0+XG5cbiAgICBAdGV4dCA9XG4gICAgICB5ZWFyIDogdChcIkRhdGV0aW1lUnVuVmlldy5sYWJlbC55ZWFyXCIpXG4gICAgICBtb250aCA6IHQoXCJEYXRldGltZVJ1blZpZXcubGFiZWwubW9udGhcIilcbiAgICAgIGRheSA6IHQoXCJEYXRldGltZVJ1blZpZXcubGFiZWwuZGF5XCIpXG4gICAgICB0aW1lIDogdChcIkRhdGV0aW1lUnVuVmlldy5sYWJlbC50aW1lXCIpXG4gICAgICBcImhlbHBcIiA6IHQoXCJTdWJ0ZXN0UnVuVmlldy5idXR0b24uaGVscFwiKVxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIFRhbmdlcmluZS5wcm9ncmVzcy5jdXJyZW50U3VidmlldyA9IEBcbiAgICBAaTE4bigpXG5cbiAgICBAbW9kZWwgID0gb3B0aW9ucy5tb2RlbFxuICAgIEBwYXJlbnQgPSBvcHRpb25zLnBhcmVudFxuICAgIEBkYXRhRW50cnkgPSBvcHRpb25zLmRhdGFFbnRyeVxuICAgIGxhYmVscyA9IHt9XG4gICAgbGFiZWxzLnRleHQgPSBAdGV4dFxuICAgIEBtb2RlbC5zZXQoJ2xhYmVscycsIGxhYmVscylcblxuICBvbkJlZm9yZVJlbmRlcjogLT5cbiAgICBkYXRlVGltZSA9IG5ldyBEYXRlKClcbiAgICBmb3JtRWxlbWVudHMgPSB7fVxuICAgIGZvcm1FbGVtZW50cy55ZWFyICAgICA9IGRhdGVUaW1lLmdldEZ1bGxZZWFyKClcbiAgICBmb3JtRWxlbWVudHMubW9udGhzICAgPSBbdChcImphblwiKSx0KFwiZmViXCIpLHQoXCJtYXJcIiksdChcImFwclwiKSx0KFwibWF5XCIpLHQoXCJqdW5cIiksdChcImp1bFwiKSx0KFwiYXVnXCIpLHQoXCJzZXBcIiksdChcIm9jdFwiKSx0KFwibm92XCIpLHQoXCJkZWNcIildXG4gICAgZm9ybUVsZW1lbnRzLm1vbnRoICAgID0gZm9ybUVsZW1lbnRzLm1vbnRoc1tkYXRlVGltZS5nZXRNb250aCgpXVxuICAgIGZvcm1FbGVtZW50cy5kYXkgICAgICA9IGRhdGVUaW1lLmdldERhdGUoKVxuICAgIG1pbnV0ZXMgICAgICAgICAgICAgICAgICAgICAgPSBkYXRlVGltZS5nZXRNaW51dGVzKClcbiAgICBmb3JtRWxlbWVudHMubWludXRlcyAgPSBtaW51dGVzXG4gICAgZm9ybUVsZW1lbnRzLm1pbnV0ZXMgID0gXCIwXCIgKyBtaW51dGVzIGlmIG1pbnV0ZXMgPCAxMFxuICAgIGZvcm1FbGVtZW50cy50aW1lICAgICA9IGRhdGVUaW1lLmdldEhvdXJzKCkgKyBcIjpcIiArIG1pbnV0ZXNcblxuICAgIHVubGVzcyBAZGF0YUVudHJ5XG5cbiAgICAgIHByZXZpb3VzID0gIEBtb2RlbC5wYXJlbnQucmVzdWx0LmdldEJ5SGFzaChAbW9kZWwuZ2V0KCdoYXNoJykpXG5cbiAgICAgIGlmIHByZXZpb3VzXG4gICAgICAgIGZvcm1FbGVtZW50cy55ZWFyICA9IHByZXZpb3VzLnllYXJcbiAgICAgICAgZm9ybUVsZW1lbnRzLm1vbnRoID0gcHJldmlvdXMubW9udGhcbiAgICAgICAgZm9ybUVsZW1lbnRzLmRheSAgID0gcHJldmlvdXMuZGF5XG4gICAgICAgIGZvcm1FbGVtZW50cy50aW1lICA9IHByZXZpb3VzLnRpbWVcblxuICAgIEBtb2RlbC5zZXQoJ2Zvcm1FbGVtZW50cycsIGZvcm1FbGVtZW50cylcbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiAgICBAdHJpZ2dlciBcInJlYWR5XCJcblxuICBnZXRSZXN1bHQ6IC0+XG4gICAgcmVzdWx0ID1cbiAgICAgIFwieWVhclwiICA6IEAkZWwuZmluZChcIiN5ZWFyXCIpLnZhbCgpXG4gICAgICBcIm1vbnRoXCIgOiBAJGVsLmZpbmQoXCIjbW9udGhcIikudmFsKClcbiAgICAgIFwiZGF5XCIgICA6IEAkZWwuZmluZChcIiNkYXlcIikudmFsKClcbiAgICAgIFwidGltZVwiICA6IEAkZWwuZmluZChcIiN0aW1lXCIpLnZhbCgpXG4gICAgaGFzaCA9IEBtb2RlbC5nZXQoXCJoYXNoXCIpIGlmIEBtb2RlbC5oYXMoXCJoYXNoXCIpXG4gICAgc3VidGVzdFJlc3VsdCA9XG4gICAgICAnYm9keScgOiByZXN1bHRcbiAgICAgICdtZXRhJyA6XG4gICAgICAgICdoYXNoJyA6IGhhc2hcblxuICBnZXRTa2lwcGVkOiAtPlxuICAgIHJldHVybiB7XG4gICAgICBcInllYXJcIiAgOiBcInNraXBwZWRcIlxuICAgICAgXCJtb250aFwiIDogXCJza2lwcGVkXCJcbiAgICAgIFwiZGF5XCIgICA6IFwic2tpcHBlZFwiXG4gICAgICBcInRpbWVcIiAgOiBcInNraXBwZWRcIlxuICAgIH1cblxuICBpc1ZhbGlkOiAtPlxuICAgIHRydWVcblxuICB0ZXN0VmFsaWQ6IC0+XG4jICAgIGNvbnNvbGUubG9nKFwiRGF0ZXRpbWVydW5JVGVtIHRlc3RWYWxpZC5cIilcbiAgICB0cnVlXG4jICAgIGlmIG5vdCBAcHJvdG90eXBlUmVuZGVyZWQgdGhlbiByZXR1cm4gZmFsc2VcbiMgICAgY3VycmVudFZpZXcgPSBUYW5nZXJpbmUucHJvZ3Jlc3MuY3VycmVudFN1YnZpZXdcbiMgICAgaWYgaXNWYWxpZD9cbiMgICAgICByZXR1cm4gaXNWYWxpZCgpXG4jICAgIGVsc2VcbiMgICAgICByZXR1cm4gZmFsc2VcbiMgICAgdHJ1ZVxuXG4gIHNob3dFcnJvcnM6IC0+XG4gICAgdHJ1ZVxuXG4gIG5leHQ6IC0+XG4gICAgY29uc29sZS5sb2coXCJuZXh0ISFcIilcbiAgICBAcHJvdG90eXBlVmlldy5vbiBcImNsaWNrIC5uZXh0XCIsICAgID0+XG4gICAgICBjb25zb2xlLmxvZyhcImNsaWNrbWUhXCIpXG4gICAgICB0aGlzLm5leHQoKVxuICAgIEBwYXJlbnQubmV4dCgpXG4gIGJhY2s6IC0+IEBwYXJlbnQuYmFjaygpXG5cblxuIl19
