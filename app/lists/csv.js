// Generated by CoffeeScript 1.7.1
(function(head, req) {
  var columnKey, columnKeys, columnNames, columnsBySubtest, csvRow, dump, exclude, excludes, include, includes, isExcluded, isIncluded, key, oneRow, oneSubtest, pair, rawCell, row, rowCache, subtest, subtestIndex, subtestKey, subtestValue, toSample, undone, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p, _ref, _ref1;
  start({
    "headers": {
      "Content-Type": "text/csv; charset=UTF-8",
      "Content-Disposition": req.query.download === "false" ? "" : "attachment; filename=\"" + req.query.filename + ".csv\""
    }
  });
  unpair = function(pair) { for (var key in pair) {return [key, pair[key]] }} ;
  excludes = req.query.excludes != null ? JSON.parse(req.query.excludes) : [];
  includes = req.query.includes != null ? JSON.parse(req.query.includes) : [];
  dump = function(obj) {
    var i, out, _i, _len, _results;
    out = "";
    _results = [];
    for (_i = 0, _len = obj.length; _i < _len; _i++) {
      i = obj[_i];
      _results.push(out += i + ": " + obj[i] + "\n");
    }
    return _results;
  };
  rowCache = [];
  columnsBySubtest = {};
  toSample = 50;
  while (true) {
    row = getRow();
    if (row == null) {
      break;
    }
    rowCache.push(row);
    _ref = row.value;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      subtest = _ref[_i];
      for (subtestIndex in subtest) {
        subtestValue = subtest[subtestIndex];
        if (columnsBySubtest[subtestIndex] == null) {
          columnsBySubtest[subtestIndex] = [];
        }
        for (_j = 0, _len1 = subtestValue.length; _j < _len1; _j++) {
          pair = subtestValue[_j];
          key = unpair(pair)[0] || '';
          isExcluded = false;
          isIncluded = false;
          for (_k = 0, _len2 = excludes.length; _k < _len2; _k++) {
            exclude = excludes[_k];
            if (exclude.match(/[^\w]/)) {
              if (key.match(new RegExp(exclude.replace(/\//g, ""), "g"))) {
                isExcluded = true;
              }
            } else {
              if (key === exclude) {
                isExcluded = true;
              }
            }
          }
          for (_l = 0, _len3 = includes.length; _l < _len3; _l++) {
            include = includes[_l];
            if (include.match(/[^\w]/)) {
              if (key.match(new RegExp(include.replace(/\//g, ""), "g"))) {
                isIncluded = true;
              }
            } else {
              if (key === include) {
                isIncluded = true;
              }
            }
          }
          if (!~columnsBySubtest[subtestIndex].indexOf(key) && (!isExcluded || isIncluded)) {
            columnsBySubtest[subtestIndex].push(key);
          }
        }
      }
    }
    if (toSample-- === 0) {
      break;
    }
  }
  columnNames = [];
  columnKeys = [];
  for (subtestKey in columnsBySubtest) {
    subtest = columnsBySubtest[subtestKey];
    for (_m = 0, _len4 = subtest.length; _m < _len4; _m++) {
      key = subtest[_m];
      columnKeys.push(key);
      columnNames.push("\"" + key + "\"");
    }
  }
  send(columnNames.join(",") + "\n");
  row = true;
  while (true) {
    if (rowCache.length !== 0) {
      row = rowCache.shift();
    } else {
      row = getRow();
    }
    if (row == null) {
      break;
    }
    oneRow = {};
    _ref1 = row.value;
    for (_n = 0, _len5 = _ref1.length; _n < _len5; _n++) {
      oneSubtest = _ref1[_n];
      for (subtestIndex in oneSubtest) {
        subtest = oneSubtest[subtestIndex];
        for (_o = 0, _len6 = subtest.length; _o < _len6; _o++) {
          pair = subtest[_o];
          undone = unpair(pair);
          if (undone == null) {
            continue;
          }
          key = undone[0];
          value = undone[1];
          oneRow[key] = value;
        }
      }
    }
    csvRow = [];
    for (_p = 0, _len7 = columnKeys.length; _p < _len7; _p++) {
      columnKey = columnKeys[_p];
      rawCell = oneRow[columnKey];
      if (rawCell != null) {
        csvRow.push('"' + String(rawCell).replace(/"/g, '”') + '"');
      } else {
        csvRow.push(null);
      }
    }
    send(csvRow.join(",") + "\n");
  }
});
