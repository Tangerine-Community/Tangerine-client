// Generated by CoffeeScript 1.7.1
describe("Testing Environment", function() {
  return it("should have mock-ajax installed", function() {
    return expect(jasmine.Ajax.isInstalled).toBeTruthy();
  });
});

describe("Assessment", function() {
  var assessmentId, assessmentName;
  assessmentName = "Testing assessment";
  assessmentId = "testAssessment";
  beforeEach(function() {
    return this.assessment = new Assessment({
      "_id": assessmentId,
      "name": assessmentName,
      "archived": false,
      "assessmentId": assessmentId,
      "sequences": []
    });
  });
  it("should return a name", function() {
    return expect(this.assessment.get('name')).toEqual(assessmentName);
  });
  it("should have the same assessmentId as _id", function() {
    return expect(this.assessment.id).toEqual(this.assessment.get("assessmentId"));
  });
  return it("should have a sequence array", function() {
    return expect(this.assessment.get("sequences")).toEqual([]);
  });
});

describe("Assessments", function() {
  var assessmentId, assessmentName;
  assessmentName = "Testing assessment";
  assessmentId = "testAssessment";
  beforeEach(function() {
    var i;
    jasmine.Ajax.installMock();
    return this.assessments = new Assessments((function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 9; i = ++_i) {
        _results.push(new Assessment({
          "_id": assessmentId + i,
          "name": assessmentName + i,
          "archived": false,
          "assessmentId": assessmentId + i,
          "sequences": []
        }));
      }
      return _results;
    })());
  });
  afterEach(function() {
    return jasmine.Ajax.uninstallMock();
  });
  it("should return 10 models", function() {
    return expect(this.assessments.length).toEqual(this.assessments.models.length);
  });
  return it("should request the assessment collection", function() {
    var assessments, mostRecent;
    assessments = new Assessments;
    assessments.fetch();
    mostRecent = mostRecentAjaxRequest();
    return expect(JSON.parse(mostRecent.params).keys[0]).toEqual("assessment");
  });
});

describe("Load Tangerine", function() {
  beforeEach((function(_this) {
    return function(done) {
      if (Tangerine.settings != null) {
        return done();
      } else {
        return Tangerine.boot(function() {
          return done();
        });
      }
    };
  })(this));
  describe("fetch assessments", function() {
    beforeEach(function(done) {
      this.assessments = new Assessments;
      return this.assessments.fetch({
        success: function() {
          return done();
        }
      });
    });
    return it("gets some assessments", function() {
      return expect(this.assessments.length).toBeGreaterThan(0);
    });
  });
  return describe("make assessments menu", function() {
    beforeEach((function(_this) {
      return function(done) {
        _this.assessments = new Assessments;
        return _this.assessments.fetch({
          success: function() {
            _this.assessmentsView = new AssessmentsView({
              assessments: _this.assessments,
              parent: _this
            });
            _this.assessmentsView.render();
            return done();
          }
        });
      };
    })(this));
    return it("should be rendered", function() {
      console.log(this.assessmentsView.el);
      return expect(this.assessments.length).toBeGreaterThan(0);
    });
  });
});
