var AssessmentControlsView;

AssessmentControlsView = Backbone.Marionette.CompositeView.extend({
  template: JST["AssessmentControls"],
  childView: AssessmentCompositeView,
  attachHtml: function(collectionView, childView, index) {
    childView.model = this.model;
    return collectionView.$("#subtest_wrapper").append(itemView.el);
  },
  i18n: function() {
    return this.text = {
      "next": t("SubtestRunView.button.next"),
      "back": t("SubtestRunView.button.back"),
      "skip": t("SubtestRunView.button.skip"),
      "help": t("SubtestRunView.button.help")
    };
  },
  initialize: function(options) {
    var backable, skippable, ui;
    this.i18n();
    this.model = options.model;
    Tangerine.progress = {};
    Tangerine.progress.index = 0;
    this.index = Tangerine.progress.index;
    ui = {};
    ui.enumeratorHelp = (this.model.get("enumeratorHelp") || "") !== "" ? "<button class='subtest_help command'>" + this.text.help + "</button><div class='enumerator_help' " + (this.fontStyle || "") + ">" + (this.model.get('enumeratorHelp')) + "</div>" : "";
    ui.studentDialog = (this.model.get("studentDialog") || "") !== "" ? "<div class='student_dialog' " + (this.fontStyle || "") + ">" + (this.model.get('studentDialog')) + "</div>" : "";
    ui.transitionComment = (this.model.get("transitionComment") || "") !== "" ? "<div class='student_dialog' " + (this.fontStyle || "") + ">" + (this.model.get('transitionComment')) + "</div> <br>" : "";
    skippable = this.model.get("skippable") === true || this.model.get("skippable") === "true";
    backable = (this.model.get("backButton") === true || this.model.get("backButton") === "true") && this.parent.index !== 0;
    if (skippable) {
      ui.skipButton = "<button class='skip navigation'>" + this.text.skip + "</button>";
    }
    if (backable) {
      ui.backButton = "<button class='subtest-back navigation'>" + this.text.back + "</button>";
    }
    ui.text = this.text;
    return this.model.set('ui', ui);
  },
  events: {
    'click .subtest-next': 'next',
    'click .subtest-back': 'back',
    'click .subtest_help': 'toggleHelp',
    'click .skip': 'skip'
  },
  onRender: function() {
    return this.$el.find('#progress').progressbar({
      value: (this.index + 1) / (this.model.subtests.length + 1) * 100
    });
  },
  next: function() {
    console.log("next");
    return this.trigger("next");
  },
  back: function() {
    return this.trigger("back");
  },
  toggleHelp: function() {
    return this.$el.find(".enumerator_help").fadeToggle(250);
  },
  skip: function() {
    return this.parent.skip();
  },
  showNext: (function(_this) {
    return function() {
      return _this.$el.find(".controlls").show();
    };
  })(this),
  hideNext: (function(_this) {
    return function() {
      return _this.$el.find(".controlls").hide();
    };
  })(this)
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYXNzZXNzbWVudC9Bc3Nlc3NtZW50Q29udHJvbHNWaWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLHNCQUFBLEdBQXlCLFFBQVEsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLE1BQWxDLENBRXhCO0VBQUEsUUFBQSxFQUFVLEdBQUksQ0FBQSxvQkFBQSxDQUFkO0VBRUEsU0FBQSxFQUFXLHVCQUZYO0VBS0EsVUFBQSxFQUFZLFNBQUMsY0FBRCxFQUFpQixTQUFqQixFQUE0QixLQUE1QjtJQUNYLFNBQVMsQ0FBQyxLQUFWLEdBQWtCLElBQUMsQ0FBQTtXQUNuQixjQUFjLENBQUMsQ0FBZixDQUFpQixrQkFBakIsQ0FBb0MsQ0FBQyxNQUFyQyxDQUE0QyxRQUFRLENBQUMsRUFBckQ7RUFGVyxDQUxaO0VBV0EsSUFBQSxFQUFNLFNBQUE7V0FDTCxJQUFDLENBQUEsSUFBRCxHQUNDO01BQUEsTUFBQSxFQUFTLENBQUEsQ0FBRSw0QkFBRixDQUFUO01BQ0EsTUFBQSxFQUFTLENBQUEsQ0FBRSw0QkFBRixDQURUO01BRUEsTUFBQSxFQUFTLENBQUEsQ0FBRSw0QkFBRixDQUZUO01BR0EsTUFBQSxFQUFTLENBQUEsQ0FBRSw0QkFBRixDQUhUOztFQUZJLENBWE47RUFrQkEsVUFBQSxFQUFZLFNBQUMsT0FBRDtBQUVYLFFBQUE7SUFBQSxJQUFDLENBQUEsSUFBRCxDQUFBO0lBRUEsSUFBQyxDQUFBLEtBQUQsR0FBUyxPQUFPLENBQUM7SUFDakIsU0FBUyxDQUFDLFFBQVYsR0FBcUI7SUFDckIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFuQixHQUEyQjtJQUMzQixJQUFDLENBQUEsS0FBRCxHQUFTLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFFNUIsRUFBQSxHQUFLO0lBQ0wsRUFBRSxDQUFDLGNBQUgsR0FBdUIsQ0FBQyxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxnQkFBWCxDQUFBLElBQWdDLEVBQWpD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QUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsa0JBQVYsQ0FBNkIsQ0FBQyxVQUE5QixDQUF5QyxHQUF6QztFQUFILENBckRaO0VBc0RBLElBQUEsRUFBTSxTQUFBO1dBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLENBQUE7RUFBSCxDQXRETjtFQXdEQSxRQUFBLEVBQVUsQ0FBQSxTQUFBLEtBQUE7V0FBQSxTQUFBO2FBQUcsS0FBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsWUFBVixDQUF1QixDQUFDLElBQXhCLENBQUE7SUFBSDtFQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0F4RFY7RUF5REEsUUFBQSxFQUFVLENBQUEsU0FBQSxLQUFBO1dBQUEsU0FBQTthQUFHLEtBQUMsQ0FBQSxHQUFHLENBQUMsSUFBTCxDQUFVLFlBQVYsQ0FBdUIsQ0FBQyxJQUF4QixDQUFBO0lBQUg7RUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBekRWO0NBRndCIiwiZmlsZSI6Im1vZHVsZXMvYXNzZXNzbWVudC9Bc3Nlc3NtZW50Q29udHJvbHNWaWV3LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiQXNzZXNzbWVudENvbnRyb2xzVmlldyA9IEJhY2tib25lLk1hcmlvbmV0dGUuQ29tcG9zaXRlVmlldy5leHRlbmRcblxuIHRlbXBsYXRlOiBKU1RbXCJBc3Nlc3NtZW50Q29udHJvbHNcIl0sXG5cbiBjaGlsZFZpZXc6IEFzc2Vzc21lbnRDb21wb3NpdGVWaWV3LFxuIyBjaGlsZFZpZXdDb250YWluZXI6ICcjc3VidGVzdF93cmFwcGVyJyxcblxuIGF0dGFjaEh0bWw6IChjb2xsZWN0aW9uVmlldywgY2hpbGRWaWV3LCBpbmRleCkgLT5cbiAgY2hpbGRWaWV3Lm1vZGVsID0gQG1vZGVsXG4gIGNvbGxlY3Rpb25WaWV3LiQoXCIjc3VidGVzdF93cmFwcGVyXCIpLmFwcGVuZChpdGVtVmlldy5lbCk7XG4gLFxuIyB0YWdOYW1lOiAnZGl2JyxcblxuIGkxOG46IC0+XG4gIEB0ZXh0ID1cbiAgIFwibmV4dFwiIDogdChcIlN1YnRlc3RSdW5WaWV3LmJ1dHRvbi5uZXh0XCIpXG4gICBcImJhY2tcIiA6IHQoXCJTdWJ0ZXN0UnVuVmlldy5idXR0b24uYmFja1wiKVxuICAgXCJza2lwXCIgOiB0KFwiU3VidGVzdFJ1blZpZXcuYnV0dG9uLnNraXBcIilcbiAgIFwiaGVscFwiIDogdChcIlN1YnRlc3RSdW5WaWV3LmJ1dHRvbi5oZWxwXCIpXG5cbiBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cblxuICBAaTE4bigpXG5cbiAgQG1vZGVsID0gb3B0aW9ucy5tb2RlbFxuICBUYW5nZXJpbmUucHJvZ3Jlc3MgPSB7fVxuICBUYW5nZXJpbmUucHJvZ3Jlc3MuaW5kZXggPSAwXG4gIEBpbmRleCA9IFRhbmdlcmluZS5wcm9ncmVzcy5pbmRleFxuXG4gIHVpID0ge31cbiAgdWkuZW51bWVyYXRvckhlbHAgPSBpZiAoQG1vZGVsLmdldChcImVudW1lcmF0b3JIZWxwXCIpIHx8IFwiXCIpICE9IFwiXCIgdGhlbiBcIjxidXR0b24gY2xhc3M9J3N1YnRlc3RfaGVscCBjb21tYW5kJz4je0B0ZXh0LmhlbHB9PC9idXR0b24+PGRpdiBjbGFzcz0nZW51bWVyYXRvcl9oZWxwJyAje0Bmb250U3R5bGUgfHwgXCJcIn0+I3tAbW9kZWwuZ2V0ICdlbnVtZXJhdG9ySGVscCd9PC9kaXY+XCIgZWxzZSBcIlwiXG4gIHVpLnN0dWRlbnREaWFsb2cgID0gaWYgKEBtb2RlbC5nZXQoXCJzdHVkZW50RGlhbG9nXCIpICB8fCBcIlwiKSAhPSBcIlwiIHRoZW4gXCI8ZGl2IGNsYXNzPSdzdHVkZW50X2RpYWxvZycgI3tAZm9udFN0eWxlIHx8IFwiXCJ9PiN7QG1vZGVsLmdldCAnc3R1ZGVudERpYWxvZyd9PC9kaXY+XCIgZWxzZSBcIlwiXG4gIHVpLnRyYW5zaXRpb25Db21tZW50ICA9IGlmIChAbW9kZWwuZ2V0KFwidHJhbnNpdGlvbkNvbW1lbnRcIikgIHx8IFwiXCIpICE9IFwiXCIgdGhlbiBcIjxkaXYgY2xhc3M9J3N0dWRlbnRfZGlhbG9nJyAje0Bmb250U3R5bGUgfHwgXCJcIn0+I3tAbW9kZWwuZ2V0ICd0cmFuc2l0aW9uQ29tbWVudCd9PC9kaXY+IDxicj5cIiBlbHNlIFwiXCJcblxuICBza2lwcGFibGUgPSBAbW9kZWwuZ2V0KFwic2tpcHBhYmxlXCIpID09IHRydWUgfHwgQG1vZGVsLmdldChcInNraXBwYWJsZVwiKSA9PSBcInRydWVcIlxuICBiYWNrYWJsZSA9ICggQG1vZGVsLmdldChcImJhY2tCdXR0b25cIikgPT0gdHJ1ZSB8fCBAbW9kZWwuZ2V0KFwiYmFja0J1dHRvblwiKSA9PSBcInRydWVcIiApIGFuZCBAcGFyZW50LmluZGV4IGlzbnQgMFxuXG4gIHVpLnNraXBCdXR0b24gPSBcIjxidXR0b24gY2xhc3M9J3NraXAgbmF2aWdhdGlvbic+I3tAdGV4dC5za2lwfTwvYnV0dG9uPlwiIGlmIHNraXBwYWJsZVxuICB1aS5iYWNrQnV0dG9uID0gXCI8YnV0dG9uIGNsYXNzPSdzdWJ0ZXN0LWJhY2sgbmF2aWdhdGlvbic+I3tAdGV4dC5iYWNrfTwvYnV0dG9uPlwiIGlmIGJhY2thYmxlXG4gIHVpLnRleHQgPSBAdGV4dFxuICBAbW9kZWwuc2V0KCd1aScsIHVpKVxuXG4gZXZlbnRzOlxuICAnY2xpY2sgLnN1YnRlc3QtbmV4dCcgOiAnbmV4dCdcbiAgJ2NsaWNrIC5zdWJ0ZXN0LWJhY2snIDogJ2JhY2snXG4gICdjbGljayAuc3VidGVzdF9oZWxwJyA6ICd0b2dnbGVIZWxwJ1xuICAnY2xpY2sgLnNraXAnICAgICAgICAgOiAnc2tpcCdcblxuIG9uUmVuZGVyOiAtPlxuICBAJGVsLmZpbmQoJyNwcm9ncmVzcycpLnByb2dyZXNzYmFyIHZhbHVlIDogKCAoIEBpbmRleCArIDEgKSAvICggQG1vZGVsLnN1YnRlc3RzLmxlbmd0aCArIDEgKSAqIDEwMCApXG5cbiBuZXh0OiAtPlxuICBjb25zb2xlLmxvZyhcIm5leHRcIilcbiAgQHRyaWdnZXIgXCJuZXh0XCJcbiBiYWNrOiAtPiBAdHJpZ2dlciBcImJhY2tcIlxuIHRvZ2dsZUhlbHA6IC0+IEAkZWwuZmluZChcIi5lbnVtZXJhdG9yX2hlbHBcIikuZmFkZVRvZ2dsZSgyNTApXG4gc2tpcDogLT4gQHBhcmVudC5za2lwKClcblxuIHNob3dOZXh0OiA9PiBAJGVsLmZpbmQoXCIuY29udHJvbGxzXCIpLnNob3coKVxuIGhpZGVOZXh0OiA9PiBAJGVsLmZpbmQoXCIuY29udHJvbGxzXCIpLmhpZGUoKVxuIl19
